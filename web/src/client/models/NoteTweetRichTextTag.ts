/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NoteTweetRichTextTag
 */
export interface NoteTweetRichTextTag {
    /**
     * Start index (inclusive) of the formatted text segment
     * @type {number}
     * @memberof NoteTweetRichTextTag
     */
    fromIndex: number;
    /**
     * End index (exclusive) of the formatted text segment
     * @type {number}
     * @memberof NoteTweetRichTextTag
     */
    toIndex: number;
    /**
     * Formatting types applied to this text range
     * @type {Array<string>}
     * @memberof NoteTweetRichTextTag
     */
    richtextTypes: Array<NoteTweetRichTextTagRichtextTypesEnum>;
}


/**
 * @export
 */
export const NoteTweetRichTextTagRichtextTypesEnum = {
    Bold: 'Bold',
    Italic: 'Italic'
} as const;
export type NoteTweetRichTextTagRichtextTypesEnum = typeof NoteTweetRichTextTagRichtextTypesEnum[keyof typeof NoteTweetRichTextTagRichtextTypesEnum];


/**
 * Check if a given object implements the NoteTweetRichTextTag interface.
 */
export function instanceOfNoteTweetRichTextTag(value: object): value is NoteTweetRichTextTag {
    if (!('fromIndex' in value) || value['fromIndex'] === undefined) return false;
    if (!('toIndex' in value) || value['toIndex'] === undefined) return false;
    if (!('richtextTypes' in value) || value['richtextTypes'] === undefined) return false;
    return true;
}

export function NoteTweetRichTextTagFromJSON(json: any): NoteTweetRichTextTag {
    return NoteTweetRichTextTagFromJSONTyped(json, false);
}

export function NoteTweetRichTextTagFromJSONTyped(json: any, ignoreDiscriminator: boolean): NoteTweetRichTextTag {
    if (json == null) {
        return json;
    }
    return {
        
        'fromIndex': json['from_index'],
        'toIndex': json['to_index'],
        'richtextTypes': json['richtext_types'],
    };
}

export function NoteTweetRichTextTagToJSON(json: any): NoteTweetRichTextTag {
    return NoteTweetRichTextTagToJSONTyped(json, false);
}

export function NoteTweetRichTextTagToJSONTyped(value?: NoteTweetRichTextTag | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'from_index': value['fromIndex'],
        'to_index': value['toIndex'],
        'richtext_types': value['richtextTypes'],
    };
}

