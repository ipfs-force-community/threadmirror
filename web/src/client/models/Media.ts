/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * Media unique identifier
     * @type {string}
     * @memberof Media
     */
    idStr: string;
    /**
     * Media key identifier
     * @type {string}
     * @memberof Media
     */
    mediaKey: string;
    /**
     * Media type (photo, video, etc.)
     * @type {string}
     * @memberof Media
     */
    type: string;
    /**
     * Media URL
     * @type {string}
     * @memberof Media
     */
    url: string;
    /**
     * Display URL for media
     * @type {string}
     * @memberof Media
     */
    displayUrl: string;
    /**
     * Expanded URL for media
     * @type {string}
     * @memberof Media
     */
    expandedUrl: string;
    /**
     * HTTPS media URL
     * @type {string}
     * @memberof Media
     */
    mediaUrlHttps: string;
    /**
     * Start and end indices in the tweet text
     * @type {Array<number>}
     * @memberof Media
     */
    indices: Array<number>;
}

/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): value is Media {
    if (!('idStr' in value) || value['idStr'] === undefined) return false;
    if (!('mediaKey' in value) || value['mediaKey'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('displayUrl' in value) || value['displayUrl'] === undefined) return false;
    if (!('expandedUrl' in value) || value['expandedUrl'] === undefined) return false;
    if (!('mediaUrlHttps' in value) || value['mediaUrlHttps'] === undefined) return false;
    if (!('indices' in value) || value['indices'] === undefined) return false;
    return true;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if (json == null) {
        return json;
    }
    return {
        
        'idStr': json['id_str'],
        'mediaKey': json['media_key'],
        'type': json['type'],
        'url': json['url'],
        'displayUrl': json['display_url'],
        'expandedUrl': json['expanded_url'],
        'mediaUrlHttps': json['media_url_https'],
        'indices': json['indices'],
    };
}

export function MediaToJSON(json: any): Media {
    return MediaToJSONTyped(json, false);
}

export function MediaToJSONTyped(value?: Media | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id_str': value['idStr'],
        'media_key': value['mediaKey'],
        'type': value['type'],
        'url': value['url'],
        'display_url': value['displayUrl'],
        'expanded_url': value['expandedUrl'],
        'media_url_https': value['mediaUrlHttps'],
        'indices': value['indices'],
    };
}

