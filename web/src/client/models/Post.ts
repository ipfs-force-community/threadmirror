/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostImagesInner } from './PostImagesInner';
import {
    PostImagesInnerFromJSON,
    PostImagesInnerFromJSONTyped,
    PostImagesInnerToJSON,
    PostImagesInnerToJSONTyped,
} from './PostImagesInner';

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * Post unique identifier
     * @type {string}
     * @memberof Post
     */
    id: string;
    /**
     * Post text content
     * @type {string}
     * @memberof Post
     */
    content: string;
    /**
     * Post images
     * @type {Array<PostImagesInner>}
     * @memberof Post
     */
    images: Array<PostImagesInner>;
    /**
     * Post creation timestamp
     * @type {Date}
     * @memberof Post
     */
    createdAt: Date;
    /**
     * Post last update timestamp
     * @type {Date}
     * @memberof Post
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Post interface.
 */
export function instanceOfPost(value: object): value is Post {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'content': json['content'],
        'images': ((json['images'] as Array<any>).map(PostImagesInnerFromJSON)),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function PostToJSON(json: any): Post {
    return PostToJSONTyped(json, false);
}

export function PostToJSONTyped(value?: Post | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'content': value['content'],
        'images': ((value['images'] as Array<any>).map(PostImagesInnerToJSON)),
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

