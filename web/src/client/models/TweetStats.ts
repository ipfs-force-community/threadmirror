/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NoteTweetRichText } from './NoteTweetRichText';
import {
    NoteTweetRichTextFromJSON,
    NoteTweetRichTextFromJSONTyped,
    NoteTweetRichTextToJSON,
    NoteTweetRichTextToJSONTyped,
} from './NoteTweetRichText';

/**
 * 
 * @export
 * @interface TweetStats
 */
export interface TweetStats {
    /**
     * Number of replies
     * @type {number}
     * @memberof TweetStats
     */
    replyCount: number;
    /**
     * Number of retweets
     * @type {number}
     * @memberof TweetStats
     */
    retweetCount: number;
    /**
     * Number of likes/favorites
     * @type {number}
     * @memberof TweetStats
     */
    favoriteCount: number;
    /**
     * Number of quote tweets
     * @type {number}
     * @memberof TweetStats
     */
    quoteCount: number;
    /**
     * Number of bookmarks
     * @type {number}
     * @memberof TweetStats
     */
    bookmarkCount: number;
    /**
     * Number of views
     * @type {number}
     * @memberof TweetStats
     */
    viewCount?: number | null;
    /**
     * Whether this is a long-form Note Tweet
     * @type {boolean}
     * @memberof TweetStats
     */
    isNoteTweet: boolean;
    /**
     * 
     * @type {NoteTweetRichText}
     * @memberof TweetStats
     */
    richtext: NoteTweetRichText;
}

/**
 * Check if a given object implements the TweetStats interface.
 */
export function instanceOfTweetStats(value: object): value is TweetStats {
    if (!('replyCount' in value) || value['replyCount'] === undefined) return false;
    if (!('retweetCount' in value) || value['retweetCount'] === undefined) return false;
    if (!('favoriteCount' in value) || value['favoriteCount'] === undefined) return false;
    if (!('quoteCount' in value) || value['quoteCount'] === undefined) return false;
    if (!('bookmarkCount' in value) || value['bookmarkCount'] === undefined) return false;
    if (!('isNoteTweet' in value) || value['isNoteTweet'] === undefined) return false;
    if (!('richtext' in value) || value['richtext'] === undefined) return false;
    return true;
}

export function TweetStatsFromJSON(json: any): TweetStats {
    return TweetStatsFromJSONTyped(json, false);
}

export function TweetStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetStats {
    if (json == null) {
        return json;
    }
    return {
        
        'replyCount': json['reply_count'],
        'retweetCount': json['retweet_count'],
        'favoriteCount': json['favorite_count'],
        'quoteCount': json['quote_count'],
        'bookmarkCount': json['bookmark_count'],
        'viewCount': json['view_count'] == null ? undefined : json['view_count'],
        'isNoteTweet': json['is_note_tweet'],
        'richtext': NoteTweetRichTextFromJSON(json['richtext']),
    };
}

export function TweetStatsToJSON(json: any): TweetStats {
    return TweetStatsToJSONTyped(json, false);
}

export function TweetStatsToJSONTyped(value?: TweetStats | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reply_count': value['replyCount'],
        'retweet_count': value['retweetCount'],
        'favorite_count': value['favoriteCount'],
        'quote_count': value['quoteCount'],
        'bookmark_count': value['bookmarkCount'],
        'view_count': value['viewCount'],
        'is_note_tweet': value['isNoteTweet'],
        'richtext': NoteTweetRichTextToJSON(value['richtext']),
    };
}

