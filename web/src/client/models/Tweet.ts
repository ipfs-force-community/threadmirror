/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TweetStats } from './TweetStats';
import {
    TweetStatsFromJSON,
    TweetStatsFromJSONTyped,
    TweetStatsToJSON,
    TweetStatsToJSONTyped,
} from './TweetStats';
import type { TweetEntities } from './TweetEntities';
import {
    TweetEntitiesFromJSON,
    TweetEntitiesFromJSONTyped,
    TweetEntitiesToJSON,
    TweetEntitiesToJSONTyped,
} from './TweetEntities';
import type { TweetUser } from './TweetUser';
import {
    TweetUserFromJSON,
    TweetUserFromJSONTyped,
    TweetUserToJSON,
    TweetUserToJSONTyped,
} from './TweetUser';
import type { NoteTweetRichText } from './NoteTweetRichText';
import {
    NoteTweetRichTextFromJSON,
    NoteTweetRichTextFromJSONTyped,
    NoteTweetRichTextToJSON,
    NoteTweetRichTextToJSONTyped,
} from './NoteTweetRichText';

/**
 * 
 * @export
 * @interface Tweet
 */
export interface Tweet {
    /**
     * Tweet unique identifier
     * @type {string}
     * @memberof Tweet
     */
    id: string;
    /**
     * Tweet REST API identifier
     * @type {string}
     * @memberof Tweet
     */
    restId: string;
    /**
     * Tweet text content
     * @type {string}
     * @memberof Tweet
     */
    text: string;
    /**
     * Tweet creation timestamp
     * @type {Date}
     * @memberof Tweet
     */
    createdAt: Date;
    /**
     * 
     * @type {TweetUser}
     * @memberof Tweet
     */
    author?: TweetUser;
    /**
     * 
     * @type {TweetEntities}
     * @memberof Tweet
     */
    entities?: TweetEntities;
    /**
     * 
     * @type {TweetStats}
     * @memberof Tweet
     */
    stats: TweetStats;
    /**
     * Whether this is a retweet
     * @type {boolean}
     * @memberof Tweet
     */
    isRetweet: boolean;
    /**
     * Whether this is a reply
     * @type {boolean}
     * @memberof Tweet
     */
    isReply: boolean;
    /**
     * Whether this is a quote tweet
     * @type {boolean}
     * @memberof Tweet
     */
    isQuoteStatus: boolean;
    /**
     * Conversation thread identifier
     * @type {string}
     * @memberof Tweet
     */
    conversationId: string;
    /**
     * ID of the tweet this is replying to
     * @type {string}
     * @memberof Tweet
     */
    inReplyToStatusId?: string | null;
    /**
     * ID of the user this is replying to
     * @type {string}
     * @memberof Tweet
     */
    inReplyToUserId?: string | null;
    /**
     * 
     * @type {Tweet}
     * @memberof Tweet
     */
    quotedTweet?: Tweet;
    /**
     * Whether this tweet has Birdwatch notes
     * @type {boolean}
     * @memberof Tweet
     */
    hasBirdwatchNotes: boolean;
    /**
     * Tweet language code
     * @type {string}
     * @memberof Tweet
     */
    lang: string;
    /**
     * Source application
     * @type {string}
     * @memberof Tweet
     */
    source?: string | null;
    /**
     * Whether content might be sensitive
     * @type {boolean}
     * @memberof Tweet
     */
    possiblySensitive: boolean;
    /**
     * Whether tweet can be translated
     * @type {boolean}
     * @memberof Tweet
     */
    isTranslatable: boolean;
    /**
     * Number of views
     * @type {number}
     * @memberof Tweet
     */
    views?: number | null;
    /**
     * Whether this is a long-form Note Tweet
     * @type {boolean}
     * @memberof Tweet
     */
    isNoteTweet: boolean;
    /**
     * 
     * @type {NoteTweetRichText}
     * @memberof Tweet
     */
    richtext?: NoteTweetRichText;
}

/**
 * Check if a given object implements the Tweet interface.
 */
export function instanceOfTweet(value: object): value is Tweet {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('restId' in value) || value['restId'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('stats' in value) || value['stats'] === undefined) return false;
    if (!('isRetweet' in value) || value['isRetweet'] === undefined) return false;
    if (!('isReply' in value) || value['isReply'] === undefined) return false;
    if (!('isQuoteStatus' in value) || value['isQuoteStatus'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('hasBirdwatchNotes' in value) || value['hasBirdwatchNotes'] === undefined) return false;
    if (!('lang' in value) || value['lang'] === undefined) return false;
    if (!('possiblySensitive' in value) || value['possiblySensitive'] === undefined) return false;
    if (!('isTranslatable' in value) || value['isTranslatable'] === undefined) return false;
    if (!('isNoteTweet' in value) || value['isNoteTweet'] === undefined) return false;
    return true;
}

export function TweetFromJSON(json: any): Tweet {
    return TweetFromJSONTyped(json, false);
}

export function TweetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tweet {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'restId': json['rest_id'],
        'text': json['text'],
        'createdAt': (new Date(json['created_at'])),
        'author': json['author'] == null ? undefined : TweetUserFromJSON(json['author']),
        'entities': json['entities'] == null ? undefined : TweetEntitiesFromJSON(json['entities']),
        'stats': TweetStatsFromJSON(json['stats']),
        'isRetweet': json['is_retweet'],
        'isReply': json['is_reply'],
        'isQuoteStatus': json['is_quote_status'],
        'conversationId': json['conversation_id'],
        'inReplyToStatusId': json['in_reply_to_status_id'] == null ? undefined : json['in_reply_to_status_id'],
        'inReplyToUserId': json['in_reply_to_user_id'] == null ? undefined : json['in_reply_to_user_id'],
        'quotedTweet': json['quoted_tweet'] == null ? undefined : TweetFromJSON(json['quoted_tweet']),
        'hasBirdwatchNotes': json['has_birdwatch_notes'],
        'lang': json['lang'],
        'source': json['source'] == null ? undefined : json['source'],
        'possiblySensitive': json['possibly_sensitive'],
        'isTranslatable': json['is_translatable'],
        'views': json['views'] == null ? undefined : json['views'],
        'isNoteTweet': json['is_note_tweet'],
        'richtext': json['richtext'] == null ? undefined : NoteTweetRichTextFromJSON(json['richtext']),
    };
}

export function TweetToJSON(json: any): Tweet {
    return TweetToJSONTyped(json, false);
}

export function TweetToJSONTyped(value?: Tweet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'rest_id': value['restId'],
        'text': value['text'],
        'created_at': ((value['createdAt']).toISOString()),
        'author': TweetUserToJSON(value['author']),
        'entities': TweetEntitiesToJSON(value['entities']),
        'stats': TweetStatsToJSON(value['stats']),
        'is_retweet': value['isRetweet'],
        'is_reply': value['isReply'],
        'is_quote_status': value['isQuoteStatus'],
        'conversation_id': value['conversationId'],
        'in_reply_to_status_id': value['inReplyToStatusId'],
        'in_reply_to_user_id': value['inReplyToUserId'],
        'quoted_tweet': TweetToJSON(value['quotedTweet']),
        'has_birdwatch_notes': value['hasBirdwatchNotes'],
        'lang': value['lang'],
        'source': value['source'],
        'possibly_sensitive': value['possiblySensitive'],
        'is_translatable': value['isTranslatable'],
        'views': value['views'],
        'is_note_tweet': value['isNoteTweet'],
        'richtext': NoteTweetRichTextToJSON(value['richtext']),
    };
}

