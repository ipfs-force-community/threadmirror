/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Hashtag } from './Hashtag';
import {
    HashtagFromJSON,
    HashtagFromJSONTyped,
    HashtagToJSON,
    HashtagToJSONTyped,
} from './Hashtag';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
    MediaToJSONTyped,
} from './Media';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { Url } from './Url';
import {
    UrlFromJSON,
    UrlFromJSONTyped,
    UrlToJSON,
    UrlToJSONTyped,
} from './Url';
import type { UserMention } from './UserMention';
import {
    UserMentionFromJSON,
    UserMentionFromJSONTyped,
    UserMentionToJSON,
    UserMentionToJSONTyped,
} from './UserMention';

/**
 * 
 * @export
 * @interface TweetEntities
 */
export interface TweetEntities {
    /**
     * Hashtags in the tweet
     * @type {Array<Hashtag>}
     * @memberof TweetEntities
     */
    hashtags: Array<Hashtag>;
    /**
     * Media attachments
     * @type {Array<Media>}
     * @memberof TweetEntities
     */
    media?: Array<Media> | null;
    /**
     * Financial symbols in the tweet
     * @type {Array<Symbol>}
     * @memberof TweetEntities
     */
    symbols: Array<Symbol>;
    /**
     * Timestamps in the tweet
     * @type {Array<Timestamp>}
     * @memberof TweetEntities
     */
    timestamps?: Array<Timestamp> | null;
    /**
     * URLs in the tweet
     * @type {Array<Url>}
     * @memberof TweetEntities
     */
    urls: Array<Url>;
    /**
     * User mentions in the tweet
     * @type {Array<UserMention>}
     * @memberof TweetEntities
     */
    userMentions: Array<UserMention>;
}

/**
 * Check if a given object implements the TweetEntities interface.
 */
export function instanceOfTweetEntities(value: object): value is TweetEntities {
    if (!('hashtags' in value) || value['hashtags'] === undefined) return false;
    if (!('symbols' in value) || value['symbols'] === undefined) return false;
    if (!('urls' in value) || value['urls'] === undefined) return false;
    if (!('userMentions' in value) || value['userMentions'] === undefined) return false;
    return true;
}

export function TweetEntitiesFromJSON(json: any): TweetEntities {
    return TweetEntitiesFromJSONTyped(json, false);
}

export function TweetEntitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetEntities {
    if (json == null) {
        return json;
    }
    return {
        
        'hashtags': ((json['hashtags'] as Array<any>).map(HashtagFromJSON)),
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(MediaFromJSON)),
        'symbols': ((json['symbols'] as Array<any>).map(SymbolFromJSON)),
        'timestamps': json['timestamps'] == null ? undefined : ((json['timestamps'] as Array<any>).map(TimestampFromJSON)),
        'urls': ((json['urls'] as Array<any>).map(UrlFromJSON)),
        'userMentions': ((json['user_mentions'] as Array<any>).map(UserMentionFromJSON)),
    };
}

export function TweetEntitiesToJSON(json: any): TweetEntities {
    return TweetEntitiesToJSONTyped(json, false);
}

export function TweetEntitiesToJSONTyped(value?: TweetEntities | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'hashtags': ((value['hashtags'] as Array<any>).map(HashtagToJSON)),
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(MediaToJSON)),
        'symbols': ((value['symbols'] as Array<any>).map(SymbolToJSON)),
        'timestamps': value['timestamps'] == null ? undefined : ((value['timestamps'] as Array<any>).map(TimestampToJSON)),
        'urls': ((value['urls'] as Array<any>).map(UrlToJSON)),
        'user_mentions': ((value['userMentions'] as Array<any>).map(UserMentionToJSON)),
    };
}

