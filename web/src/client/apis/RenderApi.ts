/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface RenderGetRequest {
    threadId: string;
    lang?: string;
    sourceLang?: string;
}

/**
 * 
 */
export class RenderApi extends runtime.BaseAPI {

    /**
     * Render a thread as an HTML page for the given thread_id, optionally in a translated language
     * Render thread as HTML
     */
    async renderGetRaw(requestParameters: RenderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling renderGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['threadId'] != null) {
            queryParameters['thread_id'] = requestParameters['threadId'];
        }

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['sourceLang'] != null) {
            queryParameters['source_lang'] = requestParameters['sourceLang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/render`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Render a thread as an HTML page for the given thread_id, optionally in a translated language
     * Render thread as HTML
     */
    async renderGet(requestParameters: RenderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.renderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
