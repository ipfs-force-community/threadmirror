/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ThreadIdGet200Response,
} from '../models/index';
import {
    ThreadIdGet200ResponseFromJSON,
    ThreadIdGet200ResponseToJSON,
} from '../models/index';

export interface ThreadIdGetRequest {
    id: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get detailed information about a specific thread
     * Get thread details
     */
    async threadIdGetRaw(requestParameters: ThreadIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling threadIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/thread/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific thread
     * Get thread details
     */
    async threadIdGet(requestParameters: ThreadIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadIdGet200Response> {
        const response = await this.threadIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
