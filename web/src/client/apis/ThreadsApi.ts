/* tslint:disable */
/* eslint-disable */
/**
 * Threadmirror Backend API
 * API for managing user profiles and follows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ThreadScrapePost200Response,
  ThreadScrapePost409Response,
  ThreadScrapePostRequest,
} from '../models/index';
import {
    ThreadScrapePost200ResponseFromJSON,
    ThreadScrapePost200ResponseToJSON,
    ThreadScrapePost409ResponseFromJSON,
    ThreadScrapePost409ResponseToJSON,
    ThreadScrapePostRequestFromJSON,
    ThreadScrapePostRequestToJSON,
} from '../models/index';

export interface ThreadScrapePostOperationRequest {
    threadScrapePostRequest: ThreadScrapePostRequest;
}

/**
 * 
 */
export class ThreadsApi extends runtime.BaseAPI {

    /**
     * Queue a job to extract and save a Twitter thread from a given Twitter/X URL. Returns job information for tracking.
     * Scrape Twitter thread from URL (Async)
     */
    async threadScrapePostRaw(requestParameters: ThreadScrapePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadScrapePost200Response>> {
        if (requestParameters['threadScrapePostRequest'] == null) {
            throw new runtime.RequiredError(
                'threadScrapePostRequest',
                'Required parameter "threadScrapePostRequest" was null or undefined when calling threadScrapePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/thread/scrape`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThreadScrapePostRequestToJSON(requestParameters['threadScrapePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadScrapePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Queue a job to extract and save a Twitter thread from a given Twitter/X URL. Returns job information for tracking.
     * Scrape Twitter thread from URL (Async)
     */
    async threadScrapePost(requestParameters: ThreadScrapePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadScrapePost200Response> {
        const response = await this.threadScrapePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
