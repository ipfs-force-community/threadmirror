// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bot_cookie.sql

package sqlc_generated

import (
	"context"
)

const countBotCookies = `-- name: CountBotCookies :one
SELECT COUNT(*) FROM bot_cookie WHERE deleted_at IS NULL
`

func (q *Queries) CountBotCookies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countBotCookies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBotCookie = `-- name: CreateBotCookie :one
INSERT INTO bot_cookie (
    email, username, cookies_data
) VALUES (
    $1, $2, $3
) RETURNING id, email, username, cookies_data, created_at, updated_at, deleted_at
`

type CreateBotCookieParams struct {
	Email       string `json:"email"`
	Username    string `json:"username"`
	CookiesData []byte `json:"cookies_data"`
}

func (q *Queries) CreateBotCookie(ctx context.Context, arg CreateBotCookieParams) (BotCookie, error) {
	row := q.db.QueryRow(ctx, createBotCookie, arg.Email, arg.Username, arg.CookiesData)
	var i BotCookie
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CookiesData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBotCookieByEmailAndUsername = `-- name: GetBotCookieByEmailAndUsername :one
SELECT id, email, username, cookies_data, created_at, updated_at, deleted_at FROM bot_cookie 
WHERE email = $1 AND username = $2 AND deleted_at IS NULL
`

type GetBotCookieByEmailAndUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetBotCookieByEmailAndUsername(ctx context.Context, arg GetBotCookieByEmailAndUsernameParams) (BotCookie, error) {
	row := q.db.QueryRow(ctx, getBotCookieByEmailAndUsername, arg.Email, arg.Username)
	var i BotCookie
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CookiesData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBotCookieByID = `-- name: GetBotCookieByID :one

SELECT id, email, username, cookies_data, created_at, updated_at, deleted_at FROM bot_cookie WHERE id = $1 AND deleted_at IS NULL
`

type GetBotCookieByIDParams struct {
	ID int32 `json:"id"`
}

// BotCookie queries
func (q *Queries) GetBotCookieByID(ctx context.Context, arg GetBotCookieByIDParams) (BotCookie, error) {
	row := q.db.QueryRow(ctx, getBotCookieByID, arg.ID)
	var i BotCookie
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CookiesData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listBotCookies = `-- name: ListBotCookies :many
SELECT id, email, username, cookies_data, created_at, updated_at, deleted_at FROM bot_cookie 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type ListBotCookiesParams struct {
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) ListBotCookies(ctx context.Context, arg ListBotCookiesParams) ([]BotCookie, error) {
	rows, err := q.db.Query(ctx, listBotCookies, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BotCookie
	for rows.Next() {
		var i BotCookie
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.CookiesData,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteBotCookie = `-- name: SoftDeleteBotCookie :exec
UPDATE bot_cookie SET
    deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type SoftDeleteBotCookieParams struct {
	ID int32 `json:"id"`
}

func (q *Queries) SoftDeleteBotCookie(ctx context.Context, arg SoftDeleteBotCookieParams) error {
	_, err := q.db.Exec(ctx, softDeleteBotCookie, arg.ID)
	return err
}

const updateBotCookie = `-- name: UpdateBotCookie :exec
UPDATE bot_cookie SET
    email = $1,
    username = $2,
    cookies_data = $3,
    updated_at = NOW()
WHERE id = $4 AND deleted_at IS NULL
`

type UpdateBotCookieParams struct {
	Email       string `json:"email"`
	Username    string `json:"username"`
	CookiesData []byte `json:"cookies_data"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateBotCookie(ctx context.Context, arg UpdateBotCookieParams) error {
	_, err := q.db.Exec(ctx, updateBotCookie,
		arg.Email,
		arg.Username,
		arg.CookiesData,
		arg.ID,
	)
	return err
}
