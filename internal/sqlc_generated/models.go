// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc_generated

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ThreadStatus string

const (
	ThreadStatusPending   ThreadStatus = "pending"
	ThreadStatusScraping  ThreadStatus = "scraping"
	ThreadStatusCompleted ThreadStatus = "completed"
	ThreadStatusFailed    ThreadStatus = "failed"
)

func (e *ThreadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ThreadStatus(s)
	case string:
		*e = ThreadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ThreadStatus: %T", src)
	}
	return nil
}

type NullThreadStatus struct {
	ThreadStatus ThreadStatus `json:"thread_status"`
	Valid        bool         `json:"valid"` // Valid is true if ThreadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullThreadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ThreadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ThreadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullThreadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ThreadStatus), nil
}

type BotCookie struct {
	ID          int32      `json:"id"`
	Email       string     `json:"email"`
	Username    string     `json:"username"`
	CookiesData []byte     `json:"cookies_data"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
	DeletedAt   *time.Time `json:"deleted_at"`
}

type Mention struct {
	ID              uuid.UUID `json:"id"`
	UserID          string    `json:"user_id"`
	ThreadID        uuid.UUID `json:"thread_id"`
	MentionCreateAt time.Time `json:"mention_create_at"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

type ProcessedMark struct {
	Key       string    `json:"key"`
	Type      string    `json:"type"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Thread struct {
	ID                    uuid.UUID `json:"id"`
	Summary               string    `json:"summary"`
	Cid                   string    `json:"cid"`
	NumTweets             int32     `json:"num_tweets"`
	Status                string    `json:"status"`
	RetryCount            int32     `json:"retry_count"`
	Version               int32     `json:"version"`
	AuthorID              *string   `json:"author_id"`
	AuthorName            *string   `json:"author_name"`
	AuthorScreenName      *string   `json:"author_screen_name"`
	AuthorProfileImageUrl *string   `json:"author_profile_image_url"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
}
