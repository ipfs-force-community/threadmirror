// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Get Supabase configuration
	// (GET /config/supabase)
	GetConfigSupabase(c *gin.Context)
	// Get current user profile
	// (GET /me)
	GetMe(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetConfigSupabase operation middleware
func (siw *ServerInterfaceWrapper) GetConfigSupabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfigSupabase(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/config/supabase", wrapper.GetConfigSupabase)
	router.GET(options.BaseURL+"/me", wrapper.GetMe)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX4/bNhL/KgTvgCaAsnL+HXp+6zbXwx6S3qKbog/pwqCkkcyuRCrkyIm78HcvhpRk",
	"yaJsp9ukL3lbL4fDmfn9Zjgc3fNUV7VWoNDy5T2vhREVIBj361oU8FpWEulHBjY1skapFV/yN+KjrJqK",
	"qaZKwDCdM4lQWYaaGcDGKB5xSYLvGzBbHnElKuBLXjp1EbfpGirh9eaiKZEvny0iXnm1fPl0Qb+kan9F",
	"HLc17ZcKoQDDd7vImff/PLcQsO/HqV32TtYzVmmvJWjW0I5FwI5dxA3YWisLLmhXCsEoUd6A2YD5jzHa",
	"0L9TrRCUs1TUdSlTQZbGv1ky935w8D8N5HzJ/xHvkYn9qo29Nnfm2N3uUGbdqQy8YMR/1PiDblT2+U34",
	"CaxuTApMaWS5O3MX8Z+VaHCtjfwdvoANw9PYE0Y/QGF7CDPwvpEGMkeeVhcddanxBkWbAEbXYFB6LNM1",
	"pHcrwtpsRDll2aXGbyxzUqyTYo/goriI2K/8ZbWwv/LHvCeNRSNVQWEBJZLSR2Ss8Zc14BoMwzWwRCOT",
	"lnWyvZpE6xKEIj210SlYC9kq1Y06mgcVRUIry/o9fMrmiDeWiERZEXb27QeJCIb1chFXTVmSiXyJpoGJ",
	"ty5B2sgv3/G9OwfRnXpz2+vSyW+QItnXJ9QBUjoLmOyEmVuLeK5NJdB7+/xZ0PkKrBXFrKJu+ZSL7YGd",
	"eMiNa1FI5Wj5BlBM/Sk/rez6mjsDqT6zRlKBrGd0oMZQArylfx9aw4PVehggry3qb4PWwmCgtMUQ3H0Z",
	"GRtE4gzhI7JOxF0qr0EVuHbXyiKQjqkBgZCtxJxGJ0A1BGUFFkVVDwmVCYQntBJKdZnN6GyUfN8Akxkl",
	"Zi7BBHdXovAuBzS0ixH3YZ9Eya2vQgZc0Qq7enWSyr2KEDaV+HjlT/53vyqMEVtXSOrseExLQUFwUn8i",
	"rFR/Tt0TP1sw10bnsoSbpqqE2U79c4Wop4rT2kd9RIyRR3NMfQUoZGkfSNiv/PzKz7+enzdNLRJh4Xut",
	"cllM0RC1XAml9OoOttOQdLuZUFptK91Y9t31FSPZgPdJk94BrqhBCJDjBrUhfL0Uc1JE/1wWjXE89s3A",
	"wLhaW1zNka3ek22o8yR5hkpDEauNpj9XBnIwoFI4EpZWlvWy57B3ekA0huEgkiEjBySaYppIPbWZdrBE",
	"6sKIer2NrSyUwMbA5Ko82dodr0zuHAOFtGj+bHXKpK1LsQ0WCae/bpJSpqyVCwY94lAJWc4ooOQSKTIn",
	"wx5pVW7ZRlqZlECvxtqHlukPCszjod1e6RkxmrX9rAqrZHoXbsidjs7xlvADAJ+FOh2ivD39WHBirAX3",
	"oHf+14vww+FYPW2D+JCSGiqMA3YMAjX2cr5IRlxsBApzKq262vyw7GKP0DQqpcMfj4F6eU6i/TWJ8Glk",
	"Cl5qq4fQ+QDETt8cklNg6OUOaWMkbm/oFvVAXIIwYL5rKJr3PHG/fug49b9f3naTHfd6dqt709aItZ8l",
	"SJXrrlcTqaNxOx+im+6mqWttHIVM2e6zyzguJK6b5CLVVQwfRVWXEOPagMgq2Q1hxrEiZTm9JoWiR2Dh",
	"ntJdnbFMqIzluiz1B/eQkkik4G8HKtmlSO9AZXQB84hvwFiv+enF4mLhXnw1KFFLvuTPLxYXzykjBK5d",
	"qOJEY2y7cUcRehf+F5CljTGg0M0gSFpalKk3jn42ZBulgqvrV5nf1Q9SDkZizxaLT5r9jLMsE3hyItSf",
	"TDgeUmaCwOWsU7uIv/TGhk7rnYpDQ74hN/ny3W3EbVc4XEjHoSRsRWEpCy418lvaHfseKLZtUzGL0E+A",
	"RsIGWN9+jLonR6+0lKDwiZUZMKkkSlHK37vmagKdbwo7dV8ewIPm9CwYZ5ynNKbUJ6HPiWf4+AGurS8e",
	"2uoMNHENw5klZK40fGP7JmTgGpMqLZuM6kcirEzdWsSsTqUoHc9s5Jjdgsb0BsxGwocQ+m/+BsSHfetZ",
	"cH/flqT5mBDcLxZPT8M9mko/mCMjVqQDKzsbB5wYeG1bZrhm5WgxFqz240LIWCkt7ju03OiqvS1atlim",
	"+17Aaw7gfd0uDD/3vAv7vxeJ95+DdtFZwu3Hmd3tZyFXP1Q4xjI3PtxNX/8VnGbowYz2LJK+HsLzN/Hx",
	"SM1qWQN+ytty0rNhQMb4Xma7o4zM3JwLslFFEoluiKy2hlTmLf9m6XeVTQkYmMK4PtZ9s6MWZv/JzjWK",
	"+17Sd817yhz2nbdfvL4Nx4FnUce5m3U7iDkvTpOg/773uVnTWxbgzXh714D7dvzdLcXef5YMgfwKNlDq",
	"uqKa6aVGHfYyjkudinKtLS6/XXy7iEUt481Tvrvd/REAAP//veHHYb0eAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
