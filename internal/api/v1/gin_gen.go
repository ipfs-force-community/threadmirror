// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
