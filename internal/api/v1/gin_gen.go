// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Get mention details
	// (GET /mentions/{id})
	GetMentionsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetMentionsId operation middleware
func (siw *ServerInterfaceWrapper) GetMentionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentionsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/mentions/:id", wrapper.GetMentionsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9HB7+F8AAAD///NB2do/KgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
