// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Render QR code
	// (GET /qrcode)
	GetQrcode(c *gin.Context, params GetQrcodeParams)
	// Render thread as HTML
	// (GET /render)
	GetRender(c *gin.Context, params GetRenderParams)
	// Download share image
	// (GET /share)
	GetShare(c *gin.Context, params GetShareParams)
	// Scrape Twitter thread from URL (Async)
	// (POST /thread/scrape)
	PostThreadScrape(c *gin.Context)
	// Get thread details
	// (GET /thread/{id})
	GetThreadId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetQrcode operation middleware
func (siw *ServerInterfaceWrapper) GetQrcode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrcodeParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQrcode(c, params)
}

// GetRender operation middleware
func (siw *ServerInterfaceWrapper) GetRender(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRender(c, params)
}

// GetShare operation middleware
func (siw *ServerInterfaceWrapper) GetShare(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShareParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShare(c, params)
}

// PostThreadScrape operation middleware
func (siw *ServerInterfaceWrapper) PostThreadScrape(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostThreadScrape(c)
}

// GetThreadId operation middleware
func (siw *ServerInterfaceWrapper) GetThreadId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreadId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/qrcode", wrapper.GetQrcode)
	router.GET(options.BaseURL+"/render", wrapper.GetRender)
	router.GET(options.BaseURL+"/share", wrapper.GetShare)
	router.POST(options.BaseURL+"/thread/scrape", wrapper.PostThreadScrape)
	router.GET(options.BaseURL+"/thread/:id", wrapper.GetThreadId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
