// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Supabase configuration
	// (GET /config/supabase)
	GetConfigSupabase(c *gin.Context)
	// Get current user profile
	// (GET /me)
	GetMe(c *gin.Context)
	// Update current user profile
	// (PUT /me)
	PutMe(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Create a new post
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Delete a post
	// (DELETE /posts/{id})
	DeletePostsId(c *gin.Context, id string)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
	// Update a post
	// (PUT /posts/{id})
	PutPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetConfigSupabase operation middleware
func (siw *ServerInterfaceWrapper) GetConfigSupabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfigSupabase(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// PutMe operation middleware
func (siw *ServerInterfaceWrapper) PutMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutMe(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// DeletePostsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePostsId(c, id)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// PutPostsId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/config/supabase", wrapper.GetConfigSupabase)
	router.GET(options.BaseURL+"/me", wrapper.GetMe)
	router.PUT(options.BaseURL+"/me", wrapper.PutMe)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.DELETE(options.BaseURL+"/posts/:id", wrapper.DeletePostsId)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
	router.PUT(options.BaseURL+"/posts/:id", wrapper.PutPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8wtP/gASoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
