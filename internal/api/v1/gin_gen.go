// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgQ3YBugWk7/AJ3eGnQdPLRdsGToQ2oEtHSy2Yp/Sp7SZIG/+3CkJMs2",
	"Haco2qc+Ujze/e7ux7uj7nhplDUaNHpe3HErnFCA4MLqTCzhtVQSaVGBL520KI3mBX8jbqRqFdOtWoBj",
	"pmYSQXmGhjnA1mmecUmCn1pwtzzjWijgBW+Cuoz7cgVKRL21aBvkxeNpxlVUy4uTKa2k7lYZx1tL56VG",
	"WILj63UW4P1d1x4S+N7u4/IfpT2AykQtSVhjHNMEjnXGHXhrtIcQtJlGcFo05+Cuwf3hnHH0uTQaQQek",
	"wtpGloKQ5h88wb0bGf7ZQc0L/lO+yUwed30etQWb2+72RpkPVhlEwYy/NfjKtLr69hD+AW9aVwLTBlkd",
	"bK4z/q8WLa6Mk//Bd8AwtsYeMVqAxs4Ic/CplQ6qQJ5OF5k6NXiOorsAzlhwKGMuyxWUH68o1+5aNPss",
	"OzX4i2dBivVS7FeYLCcZe8+fqal/z3/jA2k8OqmXFBbQYtHEiGxrfLcCXIFjuAK2MMikZ73soGZhTANC",
	"kx7rTAneQ3VVmlbfew8URcJoz4YzfJ/NGW89EYluRdrZi88SERwb5DKu26YhiLxA18Ket+GCdJEvLvnG",
	"nZ3o7nszH3SZxQcokfANF2onU6ZKQA7CLOxlvDZOCYzePnmcdF6B92J5UFG/fczFzmAvnnLjTCylDrR8",
	"Ayj2/Wm+rOzGmnsgpeaBNZIKpD2gAw2mLsAFfd5Fw5PVehygqC0bukGHMBko4zGV7qGMbAMicYZwg6wX",
	"CU3lNeglrkJbmSauY+lAIFRX4pDGIEA1BKUCj0LZMaEqgfCIdlJXXVYHdLZafmqByYouZi3BJU8rsYwu",
	"JzR0mxmPYd+LUti/SgGY0Q6bvTxK5UFFKjdK3Myi5d+HXeGcuA2FxFb3x7QRFIQg9cVh3UUZysmQ8CEu",
	"o7xuATpEtJeAQjb+K/n2g14/6LXjDA0cULZO4u05DR4xgKcgHLgXLVWmO74Iq1c9vL/eXfQDaWj6YXcD",
	"dYVo4wgkdW16jooyhKMba1+czdh5a61xAaBrunO+yPOlxFW7mJRG5XAjlG0gx5UDUSnZz47bQSVlNTVB",
	"oal3LcMEQMNELRvwTOiK1aZpzOdQ/yXSPMAvRirZqSg/gq7Yi7MZz/g1OB81n0ymk2loVBa0sJIX/Mlk",
	"OnlCE4HAVQhVvjCY+35KW6ba2Z+ArGydA41hdCJp6VGWERwtW8JGFA63bVbFU8P8tzPJP55Ov2hk3b4d",
	"lcCjg+xgmfK4S5m9DJwedGqd8WcRbMra4FSeepuMucmLy3nGfauUcLddSLdDSbkVS0+34tQgn9Pp3Bp/",
	"JC+C2TjwQMUa6ZFmhXCK1c6ojjhQBU55Zhyz7aKRZZRJ5eys2xg/WC/T7m9E8s2Ddp09SLh7Xq7n34Qa",
	"Q129jyNhAFrvF0AFx/m1M2U+iGWvx+khQ0+nJ8eZtfXO+2o6bhGw4wnEybQjX8z/iH75nazW93KwCs0d",
	"KkYFk4osNVyxMC3R01soZd0x7iDhZtU+5RKtJzS+8J+B6tfmN0PoI5vGEl9LG5LsNqH5d69H4xnoQWQJ",
	"7lb9CeLK0+NpH/5JfMuyZcfIErzZPt5339iLL+cU+/grJZXkl3ANjbH0ou5+uGy11yLPG1OKZmU8Fs+n",
	"z6e5sDK/PuHr+fr/AAAA///JM5Y4cRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
