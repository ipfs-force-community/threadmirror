// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Render QR code
	// (GET /qrcode)
	GetQrcode(c *gin.Context, params GetQrcodeParams)
	// Render thread as HTML
	// (GET /render)
	GetRender(c *gin.Context, params GetRenderParams)
	// Download share image
	// (GET /share)
	GetShare(c *gin.Context, params GetShareParams)
	// Scrape Twitter thread from URL (Async)
	// (POST /thread/scrape)
	PostThreadScrape(c *gin.Context)
	// Get thread details
	// (GET /thread/{id})
	GetThreadId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetQrcode operation middleware
func (siw *ServerInterfaceWrapper) GetQrcode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrcodeParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQrcode(c, params)
}

// GetRender operation middleware
func (siw *ServerInterfaceWrapper) GetRender(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRender(c, params)
}

// GetShare operation middleware
func (siw *ServerInterfaceWrapper) GetShare(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShareParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "scale" -------------

	err = runtime.BindQueryParameter("form", true, false, "scale", c.Request.URL.Query(), &params.Scale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scale: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShare(c, params)
}

// PostThreadScrape operation middleware
func (siw *ServerInterfaceWrapper) PostThreadScrape(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostThreadScrape(c)
}

// GetThreadId operation middleware
func (siw *ServerInterfaceWrapper) GetThreadId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreadId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/qrcode", wrapper.GetQrcode)
	router.GET(options.BaseURL+"/render", wrapper.GetRender)
	router.GET(options.BaseURL+"/share", wrapper.GetShare)
	router.POST(options.BaseURL+"/thread/scrape", wrapper.PostThreadScrape)
	router.GET(options.BaseURL+"/thread/:id", wrapper.GetThreadId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
