// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Get Supabase configuration
	// (GET /config/supabase)
	GetConfigSupabase(c *gin.Context)
	// Get current user profile
	// (GET /me)
	GetMe(c *gin.Context)
	// Update current user profile
	// (PUT /me)
	PutMe(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Create a new post
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Delete a post
	// (DELETE /posts/{id})
	DeletePostsId(c *gin.Context, id string)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
	// Update a post
	// (PUT /posts/{id})
	PutPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetConfigSupabase operation middleware
func (siw *ServerInterfaceWrapper) GetConfigSupabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfigSupabase(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// PutMe operation middleware
func (siw *ServerInterfaceWrapper) PutMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutMe(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// DeletePostsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePostsId(c, id)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// PutPostsId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/config/supabase", wrapper.GetConfigSupabase)
	router.GET(options.BaseURL+"/me", wrapper.GetMe)
	router.PUT(options.BaseURL+"/me", wrapper.PutMe)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.DELETE(options.BaseURL+"/posts/:id", wrapper.DeletePostsId)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
	router.PUT(options.BaseURL+"/posts/:id", wrapper.PutPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"91dKLQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
