// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
