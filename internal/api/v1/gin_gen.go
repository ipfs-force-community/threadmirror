// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Render QR code
	// (GET /qrcode)
	GetQrcode(c *gin.Context, params GetQrcodeParams)
	// Render thread as HTML
	// (GET /render)
	GetRender(c *gin.Context, params GetRenderParams)
	// Download share image
	// (GET /share)
	GetShare(c *gin.Context, params GetShareParams)
	// Get thread details
	// (GET /thread/{id})
	GetThreadId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetQrcode operation middleware
func (siw *ServerInterfaceWrapper) GetQrcode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrcodeParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQrcode(c, params)
}

// GetRender operation middleware
func (siw *ServerInterfaceWrapper) GetRender(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRender(c, params)
}

// GetShare operation middleware
func (siw *ServerInterfaceWrapper) GetShare(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShareParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShare(c, params)
}

// GetThreadId operation middleware
func (siw *ServerInterfaceWrapper) GetThreadId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreadId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/qrcode", wrapper.GetQrcode)
	router.GET(options.BaseURL+"/render", wrapper.GetRender)
	router.GET(options.BaseURL+"/share", wrapper.GetShare)
	router.GET(options.BaseURL+"/thread/:id", wrapper.GetThreadId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
