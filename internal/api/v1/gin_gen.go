// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Render QR code
	// (GET /qrcode)
	GetQrcode(c *gin.Context, params GetQrcodeParams)
	// Render thread as HTML
	// (GET /render)
	GetRender(c *gin.Context, params GetRenderParams)
	// Get thread details
	// (GET /thread/{id})
	GetThreadId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetQrcode operation middleware
func (siw *ServerInterfaceWrapper) GetQrcode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrcodeParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQrcode(c, params)
}

// GetRender operation middleware
func (siw *ServerInterfaceWrapper) GetRender(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRender(c, params)
}

// GetThreadId operation middleware
func (siw *ServerInterfaceWrapper) GetThreadId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreadId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/qrcode", wrapper.GetQrcode)
	router.GET(options.BaseURL+"/render", wrapper.GetRender)
	router.GET(options.BaseURL+"/thread/:id", wrapper.GetThreadId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"njZjElg1AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
