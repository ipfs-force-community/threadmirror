// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get bot statistics
	// (GET /bot/stats)
	GetBotStats(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get posts feed
	// (GET /posts)
	GetPosts(c *gin.Context, params GetPostsParams)
	// Get post details
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotStats operation middleware
func (siw *ServerInterfaceWrapper) GetBotStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotStats(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c, params)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/stats", wrapper.GetBotStats)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HqMSZcsoAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
