// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get mentions feed
	// (GET /mentions)
	GetMentions(c *gin.Context, params GetMentionsParams)
	// Render QR code
	// (GET /qrcode)
	GetQrcode(c *gin.Context, params GetQrcodeParams)
	// Render thread as HTML
	// (GET /render)
	GetRender(c *gin.Context, params GetRenderParams)
	// Download share image
	// (GET /share)
	GetShare(c *gin.Context, params GetShareParams)
	// Get thread details
	// (GET /thread/{id})
	GetThreadId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMentions operation middleware
func (siw *ServerInterfaceWrapper) GetMentions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMentions(c, params)
}

// GetQrcode operation middleware
func (siw *ServerInterfaceWrapper) GetQrcode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrcodeParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQrcode(c, params)
}

// GetRender operation middleware
func (siw *ServerInterfaceWrapper) GetRender(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRender(c, params)
}

// GetShare operation middleware
func (siw *ServerInterfaceWrapper) GetShare(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShareParams

	// ------------- Required query parameter "thread_id" -------------

	if paramValue := c.Query("thread_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument thread_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "thread_id", c.Request.URL.Query(), &params.ThreadId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thread_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShare(c, params)
}

// GetThreadId operation middleware
func (siw *ServerInterfaceWrapper) GetThreadId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreadId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/mentions", wrapper.GetMentions)
	router.GET(options.BaseURL+"/qrcode", wrapper.GetQrcode)
	router.GET(options.BaseURL+"/render", wrapper.GetRender)
	router.GET(options.BaseURL+"/share", wrapper.GetShare)
	router.GET(options.BaseURL+"/thread/:id", wrapper.GetThreadId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RbX2/bOBL/KoRugWsBbe22u8DCT9c23TaHtpfGLvahCARaGlvcSKRKUk58hb/7gRzq",
	"n0VZapLudZ9iW6Ph/PnNcDicfA1ikReCA9cqWHwNCippDhqk/XZBt/CO5UybLwmoWLJCM8GDRfCe3rK8",
	"zAkv8zVIIjaEacgV0YJI0KXkQRgwQ/ilBLkPwoDTHIJFkFl2YaDiFHKKfDe0zHSweDYPgxzZBounc/ON",
	"cfctDPS+MO8zrmELMjgcQivefzYbBR75PvTlUtesGJBKIBevWG055h45DmEgQRWCK7BGe0mTS/hSgrJS",
	"xYJr4PYjLYqMxdQIOPtTGSm/ttb7ScImWAT/mDUOmeFTNXstpXBLdbV8SRMi3WKHMDjnGiSn2RLkDiS+",
	"9d1lqBYlyq5KAAnD4IPQv4uSJ99fhEtQopQxEC402dg1D2HwidNSp0Ky/8JfIEN7NfIzMV+Aa7eIdRKT",
	"kFjcOl5mqdpHhRQFSM0QQ7FIoI9pS0zsszDYCJlTjUh8/izoAzMMclCKbgcZVY/rV5WWjG8DRLSTd/E5",
	"cAtW5Fc1vVj/CbEF3luqUk23fUUYT1iMH7siLDWVmlCeEOAJcWSEcaJTIPoGQBMNtyYkbfwaBh4F6e05",
	"Pn1mg7T54miplHRvKC2vnhBObLsSeXTDdCpKPWqPSi6nms8e7yFhtG+NhKkio/uolFlfmDN8SD5dviMb",
	"6x7DoydMGMBtQXkCiZ/Na/e0x6cGTCmZjy1LIqWlJ9Ob90nJ2ZcSCEsMqDcMpJfFD+Jtq3J0Dfshba5h",
	"P6IKsihlFqVaFx6V3q5WF0s0rjH1BAPjD36BzDPyqEiFFiHZsQRESEDHTx77GHn9/n6yJEdwdn5vW829",
	"giuFHdgewa9vqLHA4EbeZZnnVO49iY8lfdVeYeJueYw8enV+5rWNS/JRIWHH4MZnJysBcYTEEc6UE8ni",
	"7B3wrU6Dxa/zuW8NCVRDElF9gr2hMR80y0FpmhdtvyRUw8/miT8Qh9lOCsMciSOU86SYGHv3EJaXeWSZ",
	"qFM1GFLUAZ9KoIl3y8JHEW6lY3vxyhK/QNrmZZ/9kHSK+XrREYQWlX1otRfsgMLngY6lfJHxQWhYmceX",
	"LE5XbrvqBodkcWrSZKTp1mPuS/eYmC0tY0qTBDaMM74l6EttPkrKt6DamfaUiXtSrWgrl1UZ98hmXTkn",
	"KbvyFQ8bKfKI8QRuh3YU+5A8YjzOSsV28NiCLYVKYUhwb1ewNS7xQq6Rdl/49q7fG9tZCmKLR8NZEJ0y",
	"hStYs7atCtwcGD4HL0Vm4HGuacbiljGO94VWrSKGlH6Nm6dRGW7vrPKRt1pWbq3ds4vPjRd0y7jNHO9B",
	"e+qd7NvOjnhwBH9mEBMPeuaUVwzw0EJTz9a5Mj8fSzNuOOQW1kdaJ6HPUMt9vhbZ3608Rqm71TH56fFD",
	"FMid1N03iyeDI+0/VT+Hk0erG6Y1SFIqkGSgMMCT/iBXV+MQS+Z5vZBiwzKIWE634K+8a16OlljaicWh",
	"iiUAj0akRCorZOORfz2etos51dor+fQadtcZaMqy/0fR5rbv71SzVdwftmSbXnI8fBU1wGqFDKhSImbG",
	"HMRgCHexVcVuUl1gOaHkWUbXGQQLLUsYKQxOFlOdAqplkFodLzBrVz1Ubn3ArKogFjzxSYAPyI5mJVjP",
	"thDncac3O9eqVzKPpABnjkYsx9hrVuvenkknluXm5U8KZY8F34FUNrCigTxREzhMjwTLyVC+73nGLFyp",
	"O6rk64r4EAYpVdGayeSG6jiNuNA+6P2Rgk5BurrRyppSRV5W7xF8r5ZrLUQGlA+mGMthYmsmklBk+0iL",
	"SGmqS+X1xvlZVU66IsMIykxpVmR7WwKLYDDo/auZTXlkLbtv33UpZY2N2WLE4kwRSjLBtz8bMBBzCiEI",
	"da/FVfSlNKzRXlN4W3o03RBLq94UXkg4yGWyvhXpACctKVcZ1WjkQXYYV5STNZDqlXaV3WKaUb4dwqp5",
	"VpqqyDWV+3WWUIqts32kgCum2e6EUFU5kLNtqo1gzTs+uaxzkgYok/Y3CUpHw7F3+Xq5Ii8uzkeirzpL",
	"ffNx224j9m7Ds4vgnUfrLmNKvBgwT8tuS0s5vP/Up5DKET7NzeZ+sqhBgkHBhw5ftoionBNWR45ODYGa",
	"dsKlFYH9+O5vVv6s7hDuxWo/pI4zVAsMgzvv69Ym1N2BU7yxUIN3Gd1D4tRyrrq/OQz00ofazVRrGqe5",
	"vT2euBRejYxWjmGg7OnT15BhnPKY0Yw4kjup7I7kvv5LVTSoE0XX3RZtytUJBiilT/tPl+/utvYn6dXW",
	"bs+uX+lbzmzN1eO7ratAunbzaOewhnfjfmeHY0EHY2dZ5bdu4KyFuM6pvI5iUfKTbaSKUnlr8Q3dCck0",
	"jPPJ2DWoWUXv54b5Z5RVq6zw88Fia5SPIWMwxMLyn8LkhCAmm4+zuGPOb2t5LHDPM13jhscAGMSPPbj0",
	"Wxwnzhw2RGhs+d7n6NHh6l1kzcSs/bOHyUZkmbgBqca9UJP6gS4Z8GQyG2Z3xD4bX+lkdZl2alHROish",
	"2oE0NMlwLWiPEOYsZegJ0tdFUb8W9PfZrGAP0Am0fO7SBRysNi3HicXmyVaiZTS5jYhFVKlgAg5OZYVp",
	"7mOK1JR9p50uACc2N7tR1g+XY9z3DHBUY7bk7WHVl2I+yWx0LGR04GPC8btufZ1oZHnqDc/yR2bvzgI0",
	"TaWhznF795/U53fEkFhM+Pr9P/LkiT/oejqN5ZiTIdzjdq9bgW7EuD/DVzfY1iwl0/ulKfDczCNQCfJF",
	"qVNba9lvv1e57t9/rKrJShvQ9mkjXKp1gQN1jG9ENahHY5ts3HymSXrLsiiE1A5r+J5azGZbptNy/SQW",
	"+QxuaV5kMMM2Ys6qScSj25SLcxyMopxuGd9i8nG5QlmsYFqwyYxpE2ium48syUsaXxs4vbg4xxygkPPT",
	"J/Mnc3tZWQCnBQsWwfMn8yfPTSqiOrWmmqVAM7TT1tfAeZVCfE0YNsYUyB2LwWRGfG1vxZMl57jhmmiy",
	"u9x5EiyCN6DfIvejmdRn8/k3TUB2w7Tpf1WX2uLaQMOZ26Dj2jvw1G7OH2lZSglcVzOjriSaVifV9u63",
	"1dFaFUFbQnTNWETUnYBGdE8I9BC17LnJyPnr/Pk9jH7X4c3Q4y4cye14DH8ac9oUh4yb8NTs6Eljlrw2",
	"ZyvvBIvPV2FQ3f0tAoQ8iU3gmHVte+Sz+zm4Mq/O2gdcb9i9AU0oKXCgARKcnxGb5ui7kSKvSmbMvIoI",
	"SYpynbG4JvOF5PvmWXu8/rP/2NyQzJrx+0M4idgNwx+uHjT8E4qzHRPbO50BP29DSY9OWR8NlhwOE3Dz",
	"7shjZq1f5k+HlqoNNOvMidu4nY+/5Bu1tyCtYWkQ1aAHsKZ12Kwhgej8IquB7wFscgMpwNxvh2QIJR8v",
	"bRPdnS/MhmZ2jC3bQesezYfHj9I134/QeHx9DQ0bogUBjsth6eRWH/h/ivZgXJMcsFptYHacSMZha3Wd",
	"FXi/0DCq09SacZwHOGbdQ0vXeo8uPrx5jICZ4PvWf3jcGy4DOe0SeAKyZeUKOR8vX5kfEDfSUg3ixjGh",
	"lR+pKW7I29X7dybR+TET+TGDrL4ZM7J67a8EiannZ6nOswGQ2EcTIII6Q9JY7I4I+WX+y/gr9X/LfGdI",
	"NVgwarWQ5VyMyFIplcMJ6Uzc8EwYLvY21QWRhEKCAq6xAVbdI+N6BmuG6UDZurTrfSu8tlVitLWyYYGi",
	"/G2z0rLR4V456cdAXA2TrmsqwKHPEW/omtlXlhxOlmiJHUEDc5JH8xqk0bU58FKiCojZhsXNaFQPZ3iM",
	"O0/GoWZhdn5WQcmc3xokPTiE7lKPjY/Gu4G9SeWT0xgNrH4cEL2xUyhd2Y7oq44D9h8+Xxl748HS59oz",
	"2EEmirw5fnZaCovZLBMxzVKh9OK3+W/zGS3YbPc0OFwd/hcAAP//L8+Hry47AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
