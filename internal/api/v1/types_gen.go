// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BotStats defines model for BotStats.
type BotStats struct {
	// CheckInterval Bot's check interval (e.g., "5m0s")
	CheckInterval string `json:"check_interval"`

	// Enabled Whether the bot is enabled
	Enabled bool `json:"enabled"`

	// ProcessedCount Number of mentions processed
	ProcessedCount int `json:"processed_count"`

	// Username Bot's Twitter username
	Username *string `json:"username"`
}

// CreatePostRequest defines model for CreatePostRequest.
type CreatePostRequest struct {
	// Content Post text content
	Content string `json:"content"`

	// ImageIds Post image IDs
	ImageIds *[]string `json:"image_ids,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	// Limit Maximum number of items returned
	Limit int `json:"limit"`

	// Offset Number of items skipped
	Offset int `json:"offset"`

	// Total Total number of items
	Total int `json:"total"`
}

// Post defines model for Post.
type Post struct {
	// Content Post text content
	Content string `json:"content"`

	// CreatedAt Post creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Post unique identifier
	Id string `json:"id"`

	// Images Post images
	Images []struct {
		// ImageId Image ID
		ImageId string `json:"image_id"`
	} `json:"images"`

	// UpdatedAt Post last update timestamp
	UpdatedAt time.Time          `json:"updated_at"`
	User      UserProfileSummary `json:"user"`
}

// PostDetails defines model for PostDetails.
type PostDetails struct {
	// Content Post text content
	Content string `json:"content"`

	// CreatedAt Post creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Post unique identifier
	Id string `json:"id"`

	// Images Post images
	Images []struct {
		// ImageId Image ID
		ImageId string `json:"image_id"`
	} `json:"images"`

	// UpdatedAt Post last update timestamp
	UpdatedAt time.Time          `json:"updated_at"`
	User      UserProfileSummary `json:"user"`
}

// SupabaseConfig defines model for SupabaseConfig.
type SupabaseConfig struct {
	// ApiAnnoKey Supabase anonymous API key
	ApiAnnoKey string `json:"api_anno_key"`

	// BucketNames Storage bucket names configuration
	BucketNames struct {
		// PostImages post images bucket name
		PostImages string `json:"post_images"`
	} `json:"bucket_names"`

	// ProjectReference Supabase project reference ID
	ProjectReference string `json:"project_reference"`
}

// UpdatePostRequest defines model for UpdatePostRequest.
type UpdatePostRequest struct {
	// Content Updated post text content
	Content *string `json:"content,omitempty"`

	// ImageIds Updated post image IDs
	ImageIds *[]string `json:"image_ids,omitempty"`
}

// UpdateUserProfileRequest defines model for UpdateUserProfileRequest.
type UpdateUserProfileRequest struct {
	// Bio User biography/signature
	Bio *string `json:"bio,omitempty"`

	// Email User contact email
	Email *openapi_types.Email `json:"email,omitempty"`

	// Nickname User display name
	Nickname *string `json:"nickname,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	// Bio User biography/signature
	Bio *string `json:"bio"`

	// CreatedAt User registration timestamp
	CreatedAt time.Time `json:"created_at"`

	// DisplayId User public display ID
	DisplayId string `json:"display_id"`

	// Email User contact email (only visible to profile owner)
	Email *openapi_types.Email `json:"email"`

	// Id User unique identifier
	Id string `json:"id"`

	// Nickname User display name
	Nickname string `json:"nickname"`

	// PostsCount Number of posts created
	PostsCount int64 `json:"posts_count"`

	// UpdatedAt Profile last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// UserProfileSummary defines model for UserProfileSummary.
type UserProfileSummary struct {
	// Bio User biography/signature (truncated)
	Bio *string `json:"bio"`

	// DisplayId User public display ID
	DisplayId string `json:"display_id"`

	// Nickname User display name
	Nickname string `json:"nickname"`

	// UserId User unique identifier
	UserId string `json:"user_id"`
}

// PageLimit defines model for PageLimit.
type PageLimit = int

// PageOffset defines model for PageOffset.
type PageOffset = int

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Limit Maximum number of items to return
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PageOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

func (p *GetPostsParams) GetLimit() *PageLimit   { return p.Limit }
func (p *GetPostsParams) GetOffset() *PageOffset { return p.Offset }

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody = UpdateUserProfileRequest

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = CreatePostRequest

// PutPostsIdJSONRequestBody defines body for PutPostsId for application/json ContentType.
type PutPostsIdJSONRequestBody = UpdatePostRequest
