// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"time"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BotStats defines model for BotStats.
type BotStats struct {
	// CheckInterval Bot's check interval (e.g., "5m0s")
	CheckInterval string `json:"check_interval"`

	// Enabled Whether the bot is enabled
	Enabled bool `json:"enabled"`

	// ProcessedCount Number of mentions processed
	ProcessedCount int `json:"processed_count"`

	// Username Bot's Twitter username
	Username *string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// MediaInfo defines model for MediaInfo.
type MediaInfo struct {
	// AltText Alternative text for accessibility
	AltText *string `json:"alt_text"`

	// DisplayUrl Display URL for media
	DisplayUrl string `json:"display_url"`

	// ExpandedUrl Expanded URL for media
	ExpandedUrl string `json:"expanded_url"`

	// Height Media height in pixels
	Height *int `json:"height"`

	// Id Media unique identifier
	Id string `json:"id"`

	// MediaKey Media key identifier
	MediaKey string `json:"media_key"`

	// Type Media type (photo, video, etc.)
	Type string `json:"type"`

	// Url Media URL
	Url string `json:"url"`

	// Width Media width in pixels
	Width *int `json:"width"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	// Limit Maximum number of items returned
	Limit int `json:"limit"`

	// Offset Number of items skipped
	Offset int `json:"offset"`

	// Total Total number of items
	Total int `json:"total"`
}

// PostAuthor defines model for PostAuthor.
type PostAuthor struct {
	// Id Author's unique identifier (Twitter user ID)
	Id string `json:"id"`

	// Name Author's display name
	Name string `json:"name"`

	// ProfileImageUrl Author's profile image URL
	ProfileImageUrl string `json:"profile_image_url"`

	// ScreenName Author's screen name (without @)
	ScreenName string `json:"screen_name"`
}

// PostDetail defines model for PostDetail.
type PostDetail struct {
	Author *PostAuthor `json:"author,omitempty"`

	// ContentPreview Post content preview/summary
	ContentPreview string `json:"content_preview"`

	// CreatedAt Post creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Post unique identifier
	Id string `json:"id"`

	// NumTweets Number of tweets in the thread
	NumTweets int `json:"numTweets"`

	// Threads Thread tweets associated with this post
	Threads *[]Tweet `json:"threads"`
}

// PostSummary defines model for PostSummary.
type PostSummary struct {
	Author *PostAuthor `json:"author,omitempty"`

	// ContentPreview Post content preview/summary
	ContentPreview string `json:"content_preview"`

	// CreatedAt Post creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Post unique identifier
	Id string `json:"id"`

	// NumTweets Number of tweets in the thread
	NumTweets int `json:"numTweets"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Author *TweetUser `json:"author,omitempty"`

	// ConversationId Conversation thread identifier
	ConversationId string `json:"conversation_id"`

	// CreatedAt Tweet creation timestamp
	CreatedAt time.Time      `json:"created_at"`
	Entities  *TweetEntities `json:"entities,omitempty"`

	// HasBirdwatchNotes Whether this tweet has Birdwatch notes
	HasBirdwatchNotes bool `json:"has_birdwatch_notes"`

	// Id Tweet unique identifier
	Id string `json:"id"`

	// InReplyToStatusId ID of the tweet this is replying to
	InReplyToStatusId *string `json:"in_reply_to_status_id"`

	// InReplyToUserId ID of the user this is replying to
	InReplyToUserId *string `json:"in_reply_to_user_id"`

	// IsQuoteStatus Whether this is a quote tweet
	IsQuoteStatus bool `json:"is_quote_status"`

	// IsReply Whether this is a reply
	IsReply bool `json:"is_reply"`

	// IsRetweet Whether this is a retweet
	IsRetweet bool `json:"is_retweet"`

	// IsTranslatable Whether tweet can be translated
	IsTranslatable bool `json:"is_translatable"`

	// Lang Tweet language code
	Lang string `json:"lang"`

	// PossiblySensitive Whether content might be sensitive
	PossiblySensitive bool   `json:"possibly_sensitive"`
	QuotedTweet       *Tweet `json:"quoted_tweet,omitempty"`

	// RestId Tweet REST API identifier
	RestId string `json:"rest_id"`

	// Source Source application
	Source *string    `json:"source"`
	Stats  TweetStats `json:"stats"`

	// Text Tweet text content
	Text string `json:"text"`

	// Views Number of views
	Views *int `json:"views"`
}

// TweetEntities defines model for TweetEntities.
type TweetEntities struct {
	// Hashtags Hashtags in the tweet
	Hashtags []map[string]interface{} `json:"hashtags"`

	// Media Media attachments
	Media *[]MediaInfo `json:"media"`

	// Symbols Financial symbols in the tweet
	Symbols []map[string]interface{} `json:"symbols"`

	// Urls URLs in the tweet
	Urls []map[string]interface{} `json:"urls"`

	// UserMentions User mentions in the tweet
	UserMentions []map[string]interface{} `json:"user_mentions"`
}

// TweetStats defines model for TweetStats.
type TweetStats struct {
	// BookmarkCount Number of bookmarks
	BookmarkCount int `json:"bookmark_count"`

	// FavoriteCount Number of likes/favorites
	FavoriteCount int `json:"favorite_count"`

	// QuoteCount Number of quote tweets
	QuoteCount int `json:"quote_count"`

	// ReplyCount Number of replies
	ReplyCount int `json:"reply_count"`

	// RetweetCount Number of retweets
	RetweetCount int `json:"retweet_count"`

	// ViewCount Number of views
	ViewCount *int `json:"view_count"`
}

// TweetUser defines model for TweetUser.
type TweetUser struct {
	// CreatedAt User account creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Description User bio/description
	Description string `json:"description"`

	// FollowersCount Number of followers
	FollowersCount int `json:"followers_count"`

	// FriendsCount Number of following
	FriendsCount int `json:"friends_count"`

	// Id User unique identifier
	Id string `json:"id"`

	// IsBlueVerified Whether user has blue verification
	IsBlueVerified bool `json:"is_blue_verified"`

	// Name User display name
	Name string `json:"name"`

	// ProfileImageUrl User profile image URL
	ProfileImageUrl string `json:"profile_image_url"`

	// RestId User REST API identifier
	RestId string `json:"rest_id"`

	// ScreenName User screen name (without @)
	ScreenName string `json:"screen_name"`

	// StatusesCount Number of tweets
	StatusesCount int `json:"statuses_count"`

	// Verified Whether user is verified
	Verified bool `json:"verified"`
}

// PageLimit defines model for PageLimit.
type PageLimit = int

// PageOffset defines model for PageOffset.
type PageOffset = int

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Limit Maximum number of items to return
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PageOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

func (p *GetPostsParams) GetLimit() *PageLimit   { return p.Limit }
func (p *GetPostsParams) GetOffset() *PageOffset { return p.Offset }
