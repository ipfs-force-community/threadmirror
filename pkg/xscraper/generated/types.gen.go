// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
)

const (
	AcceptScopes              = "Accept.Scopes"
	AcceptEncodingScopes      = "AcceptEncoding.Scopes"
	AcceptLanguageScopes      = "AcceptLanguage.Scopes"
	ActiveUserScopes          = "ActiveUser.Scopes"
	AuthTypeScopes            = "AuthType.Scopes"
	BearerAuthScopes          = "BearerAuth.Scopes"
	ClientLanguageScopes      = "ClientLanguage.Scopes"
	ClientTransactionIdScopes = "ClientTransactionId.Scopes"
	ClientUuidScopes          = "ClientUuid.Scopes"
	CookieAuthTokenScopes     = "CookieAuthToken.Scopes"
	CookieCt0Scopes           = "CookieCt0.Scopes"
	CookieGt0Scopes           = "CookieGt0.Scopes"
	CsrfTokenScopes           = "CsrfToken.Scopes"
	GuestTokenScopes          = "GuestToken.Scopes"
	PriorityScopes            = "Priority.Scopes"
	RefererScopes             = "Referer.Scopes"
	SecChUaScopes             = "SecChUa.Scopes"
	SecChUaMobileScopes       = "SecChUaMobile.Scopes"
	SecChUaPlatformScopes     = "SecChUaPlatform.Scopes"
	SecFetchDestScopes        = "SecFetchDest.Scopes"
	SecFetchModeScopes        = "SecFetchMode.Scopes"
	SecFetchSiteScopes        = "SecFetchSite.Scopes"
	UserAgentScopes           = "UserAgent.Scopes"
)

// Defines values for AuthorCommunityRelationshipRole.
const (
	AuthorCommunityRelationshipRoleAdmin     AuthorCommunityRelationshipRole = "Admin"
	AuthorCommunityRelationshipRoleMember    AuthorCommunityRelationshipRole = "Member"
	AuthorCommunityRelationshipRoleModerator AuthorCommunityRelationshipRole = "Moderator"
	AuthorCommunityRelationshipRoleNonMember AuthorCommunityRelationshipRole = "NonMember"
)

// Defines values for BirdwatchEntityRefType.
const (
	BirdwatchEntityRefTypeTimelineRichTextHashtag BirdwatchEntityRefType = "TimelineRichTextHashtag"
	BirdwatchEntityRefTypeTimelineUrl             BirdwatchEntityRefType = "TimelineUrl"
)

// Defines values for BirdwatchEntityRefUrlType.
const (
	BirdwatchEntityRefUrlTypeExternalUrl BirdwatchEntityRefUrlType = "ExternalUrl"
)

// Defines values for BirdwatchPivotIconType.
const (
	BirdwatchV1Icon BirdwatchPivotIconType = "BirdwatchV1Icon"
)

// Defines values for BirdwatchPivotVisualStyle.
const (
	Default   BirdwatchPivotVisualStyle = "Default"
	Tentative BirdwatchPivotVisualStyle = "Tentative"
)

// Defines values for CommunityDataInvitesPolicy.
const (
	MemberInvitesAllowed    CommunityDataInvitesPolicy = "MemberInvitesAllowed"
	ModeratorInvitesAllowed CommunityDataInvitesPolicy = "ModeratorInvitesAllowed"
)

// Defines values for CommunityDataJoinPolicy.
const (
	Open                                           CommunityDataJoinPolicy = "Open"
	RestrictedJoinRequestsRequireModeratorApproval CommunityDataJoinPolicy = "RestrictedJoinRequestsRequireModeratorApproval"
)

// Defines values for CommunityDataRole.
const (
	CommunityDataRoleNonMember CommunityDataRole = "NonMember"
)

// Defines values for CommunityDeleteActionResultReason.
const (
	CommunityDeleteActionResultReasonUnavailable CommunityDeleteActionResultReason = "Unavailable"
)

// Defines values for CommunityInvitesResultReason.
const (
	CommunityInvitesResultReasonUnavailable CommunityInvitesResultReason = "Unavailable"
)

// Defines values for CommunityJoinActionUnavailableReason.
const (
	ViewerRequestRequired CommunityJoinActionUnavailableReason = "ViewerRequestRequired"
)

// Defines values for CommunityLeaveActionResultReason.
const (
	ViewerNotMember CommunityLeaveActionResultReason = "ViewerNotMember"
)

// Defines values for ContentEntryType.
const (
	ContentEntryTypeTimelineTimelineCursor ContentEntryType = "TimelineTimelineCursor"
	ContentEntryTypeTimelineTimelineItem   ContentEntryType = "TimelineTimelineItem"
	ContentEntryTypeTimelineTimelineModule ContentEntryType = "TimelineTimelineModule"
)

// Defines values for ContentItemType.
const (
	ContentItemTypeTimelineCommunity      ContentItemType = "TimelineCommunity"
	ContentItemTypeTimelineMessagePrompt  ContentItemType = "TimelineMessagePrompt"
	ContentItemTypeTimelineNotification   ContentItemType = "TimelineNotification"
	ContentItemTypeTimelinePrompt         ContentItemType = "TimelinePrompt"
	ContentItemTypeTimelineTimelineCursor ContentItemType = "TimelineTimelineCursor"
	ContentItemTypeTimelineTombstone      ContentItemType = "TimelineTombstone"
	ContentItemTypeTimelineTrend          ContentItemType = "TimelineTrend"
	ContentItemTypeTimelineTweet          ContentItemType = "TimelineTweet"
	ContentItemTypeTimelineUser           ContentItemType = "TimelineUser"
)

// Defines values for CoverCtaButtonStyle.
const (
	Primary CoverCtaButtonStyle = "Primary"
)

// Defines values for CtaClientEventInfoAction.
const (
	PrimaryCta CtaClientEventInfoAction = "primary_cta"
)

// Defines values for CursorType.
const (
	CursorTypeBottom                CursorType = "Bottom"
	CursorTypeGap                   CursorType = "Gap"
	CursorTypeShowMore              CursorType = "ShowMore"
	CursorTypeShowMoreThreads       CursorType = "ShowMoreThreads"
	CursorTypeShowMoreThreadsPrompt CursorType = "ShowMoreThreadsPrompt"
	CursorTypeTop                   CursorType = "Top"
)

// Defines values for DisplayType.
const (
	Carousel             DisplayType = "Carousel"
	Vertical             DisplayType = "Vertical"
	VerticalConversation DisplayType = "VerticalConversation"
	VerticalGrid         DisplayType = "VerticalGrid"
)

// Defines values for ExtMediaAvailabilityStatus.
const (
	Available   ExtMediaAvailabilityStatus = "Available"
	Unavailable ExtMediaAvailabilityStatus = "Unavailable"
)

// Defines values for InstructionType.
const (
	InstructionTypeTimelineAddEntries                            InstructionType = "TimelineAddEntries"
	InstructionTypeTimelineAddToModule                           InstructionType = "TimelineAddToModule"
	InstructionTypeTimelineClearCache                            InstructionType = "TimelineClearCache"
	InstructionTypeTimelineClearEntriesUnreadState               InstructionType = "TimelineClearEntriesUnreadState"
	InstructionTypeTimelineMarkEntriesUnreadGreaterThanSortIndex InstructionType = "TimelineMarkEntriesUnreadGreaterThanSortIndex"
	InstructionTypeTimelinePinEntry                              InstructionType = "TimelinePinEntry"
	InstructionTypeTimelineReplaceEntry                          InstructionType = "TimelineReplaceEntry"
	InstructionTypeTimelineShowAlert                             InstructionType = "TimelineShowAlert"
	InstructionTypeTimelineShowCover                             InstructionType = "TimelineShowCover"
	InstructionTypeTimelineTerminateTimeline                     InstructionType = "TimelineTerminateTimeline"
)

// Defines values for LimitedActionResultsDataAction.
const (
	LimitedActionResultsDataActionAddToBookmarks        LimitedActionResultsDataAction = "AddToBookmarks"
	LimitedActionResultsDataActionAddToMoment           LimitedActionResultsDataAction = "AddToMoment"
	LimitedActionResultsDataActionLike                  LimitedActionResultsDataAction = "Like"
	LimitedActionResultsDataActionPinToProfile          LimitedActionResultsDataAction = "PinToProfile"
	LimitedActionResultsDataActionQuoteTweet            LimitedActionResultsDataAction = "QuoteTweet"
	LimitedActionResultsDataActionReact                 LimitedActionResultsDataAction = "React"
	LimitedActionResultsDataActionReply                 LimitedActionResultsDataAction = "Reply"
	LimitedActionResultsDataActionReplyDownVote         LimitedActionResultsDataAction = "ReplyDownVote"
	LimitedActionResultsDataActionRetweet               LimitedActionResultsDataAction = "Retweet"
	LimitedActionResultsDataActionSendViaDm             LimitedActionResultsDataAction = "SendViaDm"
	LimitedActionResultsDataActionShowRetweetActionMenu LimitedActionResultsDataAction = "ShowRetweetActionMenu"
	LimitedActionResultsDataActionViewHiddenReplies     LimitedActionResultsDataAction = "ViewHiddenReplies"
	LimitedActionResultsDataActionViewPostEngagements   LimitedActionResultsDataAction = "ViewPostEngagements"
	LimitedActionResultsDataActionVoteOnPoll            LimitedActionResultsDataAction = "VoteOnPoll"
)

// Defines values for MediaType.
const (
	MediaTypeAnimatedGif MediaType = "animated_gif"
	MediaTypePhoto       MediaType = "photo"
	MediaTypeVideo       MediaType = "video"
)

// Defines values for MediaExtendedType.
const (
	MediaExtendedTypeAnimatedGif MediaExtendedType = "animated_gif"
	MediaExtendedTypePhoto       MediaExtendedType = "photo"
	MediaExtendedTypeVideo       MediaExtendedType = "video"
)

// Defines values for MediaSizeResize.
const (
	Crop MediaSizeResize = "crop"
	Fit  MediaSizeResize = "fit"
)

// Defines values for NoteTweetResultRichTextTagRichtextTypes.
const (
	Bold   NoteTweetResultRichTextTagRichtextTypes = "Bold"
	Italic NoteTweetResultRichTextTagRichtextTypes = "Italic"
)

// Defines values for SessionSuperFollowsApplicationStatus.
const (
	NotStarted SessionSuperFollowsApplicationStatus = "NotStarted"
)

// Defines values for SocialContextLandingUrlUrlType.
const (
	SocialContextLandingUrlUrlTypeDeepLink    SocialContextLandingUrlUrlType = "DeepLink"
	SocialContextLandingUrlUrlTypeExternalUrl SocialContextLandingUrlUrlType = "ExternalUrl"
	SocialContextLandingUrlUrlTypeUrtEndpoint SocialContextLandingUrlUrlType = "UrtEndpoint"
)

// Defines values for SocialContextUnionType.
const (
	SocialContextUnionTypeTimelineGeneralContext SocialContextUnionType = "TimelineGeneralContext"
	SocialContextUnionTypeTimelineTopicContext   SocialContextUnionType = "TimelineTopicContext"
)

// Defines values for TextEntityRefType.
const (
	TextEntityRefTypeTimelineUrl TextEntityRefType = "TimelineUrl"
)

// Defines values for TextEntityRefUrlType.
const (
	TextEntityRefUrlTypeExternalUrl TextEntityRefUrlType = "ExternalUrl"
)

// Defines values for TimelineCoverBehaviorType.
const (
	TimelineCoverBehaviorDismiss  TimelineCoverBehaviorType = "TimelineCoverBehaviorDismiss"
	TimelineCoverBehaviorNavigate TimelineCoverBehaviorType = "TimelineCoverBehaviorNavigate"
)

// Defines values for TimelineCoverBehaviorUrlUrlType.
const (
	TimelineCoverBehaviorUrlUrlTypeExternalUrl TimelineCoverBehaviorUrlUrlType = "ExternalUrl"
)

// Defines values for TimelineGeneralContextContextType.
const (
	TimelineGeneralContextContextTypeCommunity    TimelineGeneralContextContextType = "Community"
	TimelineGeneralContextContextTypeConversation TimelineGeneralContextContextType = "Conversation"
	TimelineGeneralContextContextTypeFacepile     TimelineGeneralContextContextType = "Facepile"
	TimelineGeneralContextContextTypeFollow       TimelineGeneralContextContextType = "Follow"
	TimelineGeneralContextContextTypeLike         TimelineGeneralContextContextType = "Like"
	TimelineGeneralContextContextTypeList         TimelineGeneralContextContextType = "List"
	TimelineGeneralContextContextTypeLocation     TimelineGeneralContextContextType = "Location"
	TimelineGeneralContextContextTypePin          TimelineGeneralContextContextType = "Pin"
	TimelineGeneralContextContextTypeSparkle      TimelineGeneralContextContextType = "Sparkle"
)

// Defines values for TimelineHalfCoverHalfCoverDisplayType.
const (
	Cover TimelineHalfCoverHalfCoverDisplayType = "Cover"
)

// Defines values for TimelineHalfCoverType.
const (
	TimelineHalfCoverTypeTimelineHalfCover TimelineHalfCoverType = "TimelineHalfCover"
)

// Defines values for TimelineShowAlertAlertType.
const (
	NewTweets TimelineShowAlertAlertType = "NewTweets"
)

// Defines values for TimelineShowAlertDisplayLocation.
const (
	TimelineShowAlertDisplayLocationTop TimelineShowAlertDisplayLocation = "Top"
)

// Defines values for TimelineTerminateTimelineDirection.
const (
	Bottom       TimelineTerminateTimelineDirection = "Bottom"
	Top          TimelineTerminateTimelineDirection = "Top"
	TopAndBottom TimelineTerminateTimelineDirection = "TopAndBottom"
)

// Defines values for TimelineTombstoneTombstoneDisplayType.
const (
	Inline TimelineTombstoneTombstoneDisplayType = "Inline"
)

// Defines values for TimelineTopicContextFunctionalityType.
const (
	Basic TimelineTopicContextFunctionalityType = "Basic"
)

// Defines values for TimelineTweetTweetDisplayType.
const (
	TimelineTweetTweetDisplayTypeCondensedTweet TimelineTweetTweetDisplayType = "CondensedTweet"
	TimelineTweetTweetDisplayTypeMediaGrid      TimelineTweetTweetDisplayType = "MediaGrid"
	TimelineTweetTweetDisplayTypeSelfThread     TimelineTweetTweetDisplayType = "SelfThread"
	TimelineTweetTweetDisplayTypeTweet          TimelineTweetTweetDisplayType = "Tweet"
)

// Defines values for TimelineUserUserDisplayType.
const (
	TimelineUserUserDisplayTypeSubscribableUser TimelineUserUserDisplayType = "SubscribableUser"
	TimelineUserUserDisplayTypeUser             TimelineUserUserDisplayType = "User"
	TimelineUserUserDisplayTypeUserConcise      TimelineUserUserDisplayType = "UserConcise"
	TimelineUserUserDisplayTypeUserDetailed     TimelineUserUserDisplayType = "UserDetailed"
)

// Defines values for TombstoneRefType.
const (
	TombstoneRefTypeTimelineUrl TombstoneRefType = "TimelineUrl"
)

// Defines values for TombstoneRefUrlType.
const (
	TombstoneRefUrlTypeExternalUrl TombstoneRefUrlType = "ExternalUrl"
)

// Defines values for TweetCardPlatformAudienceName.
const (
	Production TweetCardPlatformAudienceName = "production"
)

// Defines values for TweetInterstitialDisplayType.
const (
	TweetInterstitialDisplayTypeNonCompliant TweetInterstitialDisplayType = "NonCompliant"
)

// Defines values for TweetInterstitialTextEntityRefType.
const (
	TweetInterstitialTextEntityRefTypeTimelineUrl TweetInterstitialTextEntityRefType = "TimelineUrl"
)

// Defines values for TweetInterstitialTextEntityRefUrlType.
const (
	TweetInterstitialTextEntityRefUrlTypeExternalUrl TweetInterstitialTextEntityRefUrlType = "ExternalUrl"
)

// Defines values for TweetLegacyLimitedActions.
const (
	TweetLegacyLimitedActionsBlockedViewer                          TweetLegacyLimitedActions = "blocked_viewer"
	TweetLegacyLimitedActionsCommunityTweetNonMemberClosedCommunity TweetLegacyLimitedActions = "community_tweet_non_member_closed_community"
	TweetLegacyLimitedActionsCommunityTweetNonMemberPublicCommunity TweetLegacyLimitedActions = "community_tweet_non_member_public_community"
	TweetLegacyLimitedActionsDynamicProductAd                       TweetLegacyLimitedActions = "dynamic_product_ad"
	TweetLegacyLimitedActionsLimitedReplies                         TweetLegacyLimitedActions = "limited_replies"
	TweetLegacyLimitedActionsNonCompliant                           TweetLegacyLimitedActions = "non_compliant"
	TweetLegacyLimitedActionsStaleTweet                             TweetLegacyLimitedActions = "stale_tweet"
)

// Defines values for TweetPreviewDisplayCtaUrlUrlType.
const (
	TweetPreviewDisplayCtaUrlUrlTypeDeepLink    TweetPreviewDisplayCtaUrlUrlType = "DeepLink"
	TweetPreviewDisplayCtaUrlUrlTypeExternalUrl TweetPreviewDisplayCtaUrlUrlType = "ExternalUrl"
	TweetPreviewDisplayCtaUrlUrlTypeUrtEndpoint TweetPreviewDisplayCtaUrlUrlType = "UrtEndpoint"
)

// Defines values for TweetViewState.
const (
	Enabled          TweetViewState = "Enabled"
	EnabledWithCount TweetViewState = "EnabledWithCount"
)

// Defines values for TypeName.
const (
	TypeNameApiImage                                 TypeName = "ApiImage"
	TypeNameCommunity                                TypeName = "Community"
	TypeNameCommunityDeleteActionUnavailable         TypeName = "CommunityDeleteActionUnavailable"
	TypeNameCommunityInvitesUnavailable              TypeName = "CommunityInvitesUnavailable"
	TypeNameCommunityJoinAction                      TypeName = "CommunityJoinAction"
	TypeNameCommunityJoinActionUnavailable           TypeName = "CommunityJoinActionUnavailable"
	TypeNameCommunityJoinRequestsUnavailable         TypeName = "CommunityJoinRequestsUnavailable"
	TypeNameCommunityLeaveActionUnavailable          TypeName = "CommunityLeaveActionUnavailable"
	TypeNameCommunityTweetPinActionUnavailable       TypeName = "CommunityTweetPinActionUnavailable"
	TypeNameCommunityTweetUnpinActionUnavailable     TypeName = "CommunityTweetUnpinActionUnavailable"
	TypeNameContextualTweetInterstitial              TypeName = "ContextualTweetInterstitial"
	TypeNameTimelineCommunity                        TypeName = "TimelineCommunity"
	TypeNameTimelineMessagePrompt                    TypeName = "TimelineMessagePrompt"
	TypeNameTimelineNotification                     TypeName = "TimelineNotification"
	TypeNameTimelineNotificationAggregateUserActions TypeName = "TimelineNotificationAggregateUserActions"
	TypeNameTimelinePrompt                           TypeName = "TimelinePrompt"
	TypeNameTimelineTimelineCursor                   TypeName = "TimelineTimelineCursor"
	TypeNameTimelineTimelineItem                     TypeName = "TimelineTimelineItem"
	TypeNameTimelineTimelineModule                   TypeName = "TimelineTimelineModule"
	TypeNameTimelineTombstone                        TypeName = "TimelineTombstone"
	TypeNameTimelineTrend                            TypeName = "TimelineTrend"
	TypeNameTimelineTweet                            TypeName = "TimelineTweet"
	TypeNameTimelineUser                             TypeName = "TimelineUser"
	TypeNameTweet                                    TypeName = "Tweet"
	TypeNameTweetPreviewDisplay                      TypeName = "TweetPreviewDisplay"
	TypeNameTweetTombstone                           TypeName = "TweetTombstone"
	TypeNameTweetUnavailable                         TypeName = "TweetUnavailable"
	TypeNameTweetWithVisibilityResults               TypeName = "TweetWithVisibilityResults"
	TypeNameUser                                     TypeName = "User"
	TypeNameUserUnavailable                          TypeName = "UserUnavailable"
)

// Defines values for UnifiedCardCardFetchState.
const (
	NoCard UnifiedCardCardFetchState = "NoCard"
)

// Defines values for UserParodyCommentaryFanLabel.
const (
	Commentary UserParodyCommentaryFanLabel = "Commentary"
	None       UserParodyCommentaryFanLabel = "None"
	Parody     UserParodyCommentaryFanLabel = "Parody"
)

// Defines values for UserProfileImageShape.
const (
	Circle  UserProfileImageShape = "Circle"
	Hexagon UserProfileImageShape = "Hexagon"
	Square  UserProfileImageShape = "Square"
)

// Defines values for UserLegacyVerifiedType.
const (
	UserLegacyVerifiedTypeBusiness   UserLegacyVerifiedType = "Business"
	UserLegacyVerifiedTypeGovernment UserLegacyVerifiedType = "Government"
)

// Defines values for UserLegacyExtendedProfileBirthdateVisibility.
const (
	UserLegacyExtendedProfileBirthdateVisibilityFollowers    UserLegacyExtendedProfileBirthdateVisibility = "Followers"
	UserLegacyExtendedProfileBirthdateVisibilityFollowing    UserLegacyExtendedProfileBirthdateVisibility = "Following"
	UserLegacyExtendedProfileBirthdateVisibilityMutualFollow UserLegacyExtendedProfileBirthdateVisibility = "MutualFollow"
	UserLegacyExtendedProfileBirthdateVisibilityPublic       UserLegacyExtendedProfileBirthdateVisibility = "Public"
	UserLegacyExtendedProfileBirthdateVisibilitySelf         UserLegacyExtendedProfileBirthdateVisibility = "Self"
)

// Defines values for UserLegacyExtendedProfileBirthdateYearVisibility.
const (
	UserLegacyExtendedProfileBirthdateYearVisibilityFollowers    UserLegacyExtendedProfileBirthdateYearVisibility = "Followers"
	UserLegacyExtendedProfileBirthdateYearVisibilityFollowing    UserLegacyExtendedProfileBirthdateYearVisibility = "Following"
	UserLegacyExtendedProfileBirthdateYearVisibilityMutualFollow UserLegacyExtendedProfileBirthdateYearVisibility = "MutualFollow"
	UserLegacyExtendedProfileBirthdateYearVisibilityPublic       UserLegacyExtendedProfileBirthdateYearVisibility = "Public"
	UserLegacyExtendedProfileBirthdateYearVisibilitySelf         UserLegacyExtendedProfileBirthdateYearVisibility = "Self"
)

// Defines values for UserProfessionalProfessionalType.
const (
	UserProfessionalProfessionalTypeBusiness UserProfessionalProfessionalType = "Business"
	UserProfessionalProfessionalTypeCreator  UserProfessionalProfessionalType = "Creator"
)

// Defines values for UserVerificationInfoReasonDescriptionEntitiesRefUrlType.
const (
	UserVerificationInfoReasonDescriptionEntitiesRefUrlTypeExternalUrl UserVerificationInfoReasonDescriptionEntitiesRefUrlType = "ExternalUrl"
)

// AboutCommunityResult defines model for AboutCommunityResult.
type AboutCommunityResult struct {
	Typename      TypeName       `json:"__typename"`
	AboutTimeline TimelineResult `json:"about_timeline"`
}

// AboutCommunityResults defines model for AboutCommunityResults.
type AboutCommunityResults struct {
	Result AboutCommunityResult `json:"result"`
}

// AboutCommunityTweetData defines model for AboutCommunityTweetData.
type AboutCommunityTweetData struct {
	CommunityResults AboutCommunityResults `json:"communityResults"`
}

// AdditionalMediaInfo defines model for AdditionalMediaInfo.
type AdditionalMediaInfo struct {
	CallToActions *AdditionalMediaInfoCallToActions `json:"call_to_actions,omitempty"`
	Description   *string                           `json:"description,omitempty"`
	Embeddable    *bool                             `json:"embeddable,omitempty"`
	Monetizable   bool                              `json:"monetizable"`
	SourceUser    *UserResultCore                   `json:"source_user,omitempty"`
	Title         *string                           `json:"title,omitempty"`
}

// AdditionalMediaInfoCallToActions defines model for AdditionalMediaInfoCallToActions.
type AdditionalMediaInfoCallToActions struct {
	VisitSite *AdditionalMediaInfoCallToActionsUrl `json:"visit_site,omitempty"`
	WatchNow  *AdditionalMediaInfoCallToActionsUrl `json:"watch_now,omitempty"`
}

// AdditionalMediaInfoCallToActionsUrl defines model for AdditionalMediaInfoCallToActionsUrl.
type AdditionalMediaInfoCallToActionsUrl struct {
	Url string `json:"url"`
}

// AllowDownloadStatus defines model for AllowDownloadStatus.
type AllowDownloadStatus struct {
	AllowDownload *bool `json:"allow_download,omitempty"`
}

// AnalysisResults defines model for AnalysisResults.
type AnalysisResults struct {
	Result Tweet `json:"result"`
}

// Article defines model for Article.
type Article struct {
	ArticleResults ArticleResults `json:"article_results"`
}

// ArticleCoverMedia defines model for ArticleCoverMedia.
type ArticleCoverMedia struct {
	Id        string                `json:"id"`
	MediaId   string                `json:"media_id"`
	MediaInfo ArticleCoverMediaInfo `json:"media_info"`
	MediaKey  string                `json:"media_key"`
}

// ArticleCoverMediaColorInfo defines model for ArticleCoverMediaColorInfo.
type ArticleCoverMediaColorInfo struct {
	Palette []ArticleCoverMediaColorInfoPalette `json:"palette"`
}

// ArticleCoverMediaColorInfoPalette defines model for ArticleCoverMediaColorInfoPalette.
type ArticleCoverMediaColorInfoPalette struct {
	Percentage float32                              `json:"percentage"`
	Rgb        ArticleCoverMediaColorInfoPaletteRGB `json:"rgb"`
}

// ArticleCoverMediaColorInfoPaletteRGB defines model for ArticleCoverMediaColorInfoPaletteRGB.
type ArticleCoverMediaColorInfoPaletteRGB struct {
	Blue  int `json:"blue"`
	Green int `json:"green"`
	Red   int `json:"red"`
}

// ArticleCoverMediaInfo defines model for ArticleCoverMediaInfo.
type ArticleCoverMediaInfo struct {
	Typename          *TypeName                  `json:"__typename,omitempty"`
	ColorInfo         ArticleCoverMediaColorInfo `json:"color_info"`
	OriginalImgHeight int                        `json:"original_img_height"`
	OriginalImgUrl    string                     `json:"original_img_url"`
	OriginalImgWidth  int                        `json:"original_img_width"`
}

// ArticleLifecycleState defines model for ArticleLifecycleState.
type ArticleLifecycleState struct {
	ModifiedAtSecs int `json:"modified_at_secs"`
}

// ArticleMetadata defines model for ArticleMetadata.
type ArticleMetadata struct {
	FirstPublishedAtSecs int `json:"first_published_at_secs"`
}

// ArticleResult defines model for ArticleResult.
type ArticleResult struct {
	CoverMedia     ArticleCoverMedia      `json:"cover_media"`
	Id             string                 `json:"id"`
	LifecycleState *ArticleLifecycleState `json:"lifecycle_state,omitempty"`
	Metadata       ArticleMetadata        `json:"metadata"`
	PreviewText    string                 `json:"preview_text"`
	RestId         string                 `json:"rest_id"`
	Title          string                 `json:"title"`
}

// ArticleResults defines model for ArticleResults.
type ArticleResults struct {
	Result ArticleResult `json:"result"`
}

// AuthorCommunityRelationship defines model for AuthorCommunityRelationship.
type AuthorCommunityRelationship struct {
	CommunityResults Community                        `json:"community_results"`
	Role             *AuthorCommunityRelationshipRole `json:"role,omitempty"`
	UserResults      *UserResults                     `json:"user_results,omitempty"`
}

// AuthorCommunityRelationshipRole defines model for AuthorCommunityRelationship.Role.
type AuthorCommunityRelationshipRole string

// BirdwatchEntity defines model for BirdwatchEntity.
type BirdwatchEntity struct {
	FromIndex int                `json:"fromIndex"`
	Ref       BirdwatchEntityRef `json:"ref"`
	ToIndex   int                `json:"toIndex"`
}

// BirdwatchEntityRef defines model for BirdwatchEntityRef.
type BirdwatchEntityRef struct {
	Text    *string                    `json:"text,omitempty"`
	Type    BirdwatchEntityRefType     `json:"type"`
	Url     *string                    `json:"url,omitempty"`
	UrlType *BirdwatchEntityRefUrlType `json:"urlType,omitempty"`
}

// BirdwatchEntityRefType defines model for BirdwatchEntityRef.Type.
type BirdwatchEntityRefType string

// BirdwatchEntityRefUrlType defines model for BirdwatchEntityRef.UrlType.
type BirdwatchEntityRefUrlType string

// BirdwatchPivot defines model for BirdwatchPivot.
type BirdwatchPivot struct {
	CallToAction   *BirdwatchPivotCallToAction `json:"callToAction,omitempty"`
	DestinationUrl string                      `json:"destinationUrl"`
	Footer         *BirdwatchPivotFooter       `json:"footer,omitempty"`
	IconType       BirdwatchPivotIconType      `json:"iconType"`
	Note           *BirdwatchPivotNote         `json:"note,omitempty"`
	Shorttitle     *string                     `json:"shorttitle,omitempty"`
	Subtitle       *BirdwatchPivotSubtitle     `json:"subtitle,omitempty"`
	Title          string                      `json:"title"`
	TitleDetail    *string                     `json:"titleDetail,omitempty"`
	VisualStyle    *BirdwatchPivotVisualStyle  `json:"visualStyle,omitempty"`
}

// BirdwatchPivotIconType defines model for BirdwatchPivot.IconType.
type BirdwatchPivotIconType string

// BirdwatchPivotVisualStyle defines model for BirdwatchPivot.VisualStyle.
type BirdwatchPivotVisualStyle string

// BirdwatchPivotCallToAction defines model for BirdwatchPivotCallToAction.
type BirdwatchPivotCallToAction struct {
	DestinationUrl string `json:"destinationUrl"`
	Prompt         string `json:"prompt"`
	Title          string `json:"title"`
}

// BirdwatchPivotFooter defines model for BirdwatchPivotFooter.
type BirdwatchPivotFooter struct {
	Entities []BirdwatchEntity `json:"entities"`
	Text     string            `json:"text"`
}

// BirdwatchPivotNote defines model for BirdwatchPivotNote.
type BirdwatchPivotNote struct {
	RestId string `json:"rest_id"`
}

// BirdwatchPivotSubtitle defines model for BirdwatchPivotSubtitle.
type BirdwatchPivotSubtitle struct {
	Entities []BirdwatchEntity `json:"entities"`
	Text     string            `json:"text"`
}

// BookmarksResponse defines model for BookmarksResponse.
type BookmarksResponse struct {
	Data   *BookmarksResponseData `json:"data,omitempty"`
	Errors *[]ErrorResponse       `json:"errors,omitempty"`
}

// BookmarksResponseData defines model for BookmarksResponseData.
type BookmarksResponseData struct {
	BookmarkTimelineV2 BookmarksTimeline `json:"bookmark_timeline_v2"`
}

// BookmarksTimeline defines model for BookmarksTimeline.
type BookmarksTimeline struct {
	Timeline Timeline `json:"timeline"`
}

// Callback defines model for Callback.
type Callback struct {
	Endpoint string `json:"endpoint"`
}

// ClientEventInfo defines model for ClientEventInfo.
type ClientEventInfo struct {
	Component *string                 `json:"component,omitempty"`
	Details   *map[string]interface{} `json:"details,omitempty"`
	Element   *string                 `json:"element,omitempty"`
}

// CommunitiesActions defines model for CommunitiesActions.
type CommunitiesActions struct {
	Create bool `json:"create"`
}

// Community defines model for Community.
type Community struct {
	Result CommunityData `json:"result"`
}

// CommunityAboutTimelineResponse defines model for CommunityAboutTimelineResponse.
type CommunityAboutTimelineResponse struct {
	Data   AboutCommunityTweetData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// CommunityActions defines model for CommunityActions.
type CommunityActions struct {
	DeleteActionResult *CommunityDeleteActionResult    `json:"delete_action_result,omitempty"`
	JoinActionResult   *CommunityJoinActionResultUnion `json:"join_action_result,omitempty"`
	LeaveActionResult  *CommunityLeaveActionResult     `json:"leave_action_result,omitempty"`
	PinActionResult    *CommunityPinActionResult       `json:"pin_action_result,omitempty"`
	UnpinActionResult  *CommunityUnpinActionResult     `json:"unpin_action_result,omitempty"`
}

// CommunityData defines model for CommunityData.
type CommunityData struct {
	Typename               TypeName                     `json:"__typename"`
	Actions                *CommunityActions            `json:"actions,omitempty"`
	AdminResults           *UserResults                 `json:"admin_results,omitempty"`
	CreatedAt              *int                         `json:"created_at,omitempty"`
	CreatorResults         *UserResults                 `json:"creator_results,omitempty"`
	CustomBannerMedia      *map[string]interface{}      `json:"custom_banner_media,omitempty"`
	DefaultBannerMedia     *map[string]interface{}      `json:"default_banner_media,omitempty"`
	Description            *string                      `json:"description,omitempty"`
	IdStr                  string                       `json:"id_str"`
	InvitesPolicy          *CommunityDataInvitesPolicy  `json:"invites_policy,omitempty"`
	InvitesResult          *CommunityInvitesResult      `json:"invites_result,omitempty"`
	IsPinned               *bool                        `json:"is_pinned,omitempty"`
	JoinPolicy             *CommunityDataJoinPolicy     `json:"join_policy,omitempty"`
	JoinRequestsResult     *CommunityJoinRequestsResult `json:"join_requests_result,omitempty"`
	MemberCount            *int                         `json:"member_count,omitempty"`
	MembersFacepileResults *[]UserResults               `json:"members_facepile_results,omitempty"`
	ModeratorCount         *int                         `json:"moderator_count,omitempty"`
	Name                   *string                      `json:"name,omitempty"`
	PrimaryCommunityTopic  *PrimaryCommunityTopic       `json:"primary_community_topic,omitempty"`
	Question               *string                      `json:"question,omitempty"`
	Role                   *CommunityDataRole           `json:"role,omitempty"`
	Rules                  *[]CommunityRule             `json:"rules,omitempty"`
	SearchTags             *[]string                    `json:"search_tags,omitempty"`
	ShowOnlyUsersToDisplay *[]string                    `json:"show_only_users_to_display,omitempty"`
	Urls                   *CommunityUrls               `json:"urls,omitempty"`
	ViewerRelationship     *map[string]interface{}      `json:"viewer_relationship,omitempty"`
}

// CommunityDataInvitesPolicy defines model for CommunityData.InvitesPolicy.
type CommunityDataInvitesPolicy string

// CommunityDataJoinPolicy defines model for CommunityData.JoinPolicy.
type CommunityDataJoinPolicy string

// CommunityDataRole defines model for CommunityData.Role.
type CommunityDataRole string

// CommunityDeleteActionResult defines model for CommunityDeleteActionResult.
type CommunityDeleteActionResult struct {
	Typename TypeName                          `json:"__typename"`
	Reason   CommunityDeleteActionResultReason `json:"reason"`
}

// CommunityDeleteActionResultReason defines model for CommunityDeleteActionResult.Reason.
type CommunityDeleteActionResultReason string

// CommunityInvitesResult defines model for CommunityInvitesResult.
type CommunityInvitesResult struct {
	Typename TypeName                     `json:"__typename"`
	Message  string                       `json:"message"`
	Reason   CommunityInvitesResultReason `json:"reason"`
}

// CommunityInvitesResultReason defines model for CommunityInvitesResult.Reason.
type CommunityInvitesResultReason string

// CommunityJoinAction defines model for CommunityJoinAction.
type CommunityJoinAction struct {
	Typename TypeName `json:"__typename"`
}

// CommunityJoinActionResultUnion defines model for CommunityJoinActionResultUnion.
type CommunityJoinActionResultUnion struct {
	union json.RawMessage
}

// CommunityJoinActionUnavailable defines model for CommunityJoinActionUnavailable.
type CommunityJoinActionUnavailable struct {
	Typename TypeName                             `json:"__typename"`
	Message  string                               `json:"message"`
	Reason   CommunityJoinActionUnavailableReason `json:"reason"`
}

// CommunityJoinActionUnavailableReason defines model for CommunityJoinActionUnavailable.Reason.
type CommunityJoinActionUnavailableReason string

// CommunityJoinRequestsResult defines model for CommunityJoinRequestsResult.
type CommunityJoinRequestsResult struct {
	Typename TypeName `json:"__typename"`
}

// CommunityLeaveActionResult defines model for CommunityLeaveActionResult.
type CommunityLeaveActionResult struct {
	Typename TypeName                         `json:"__typename"`
	Message  string                           `json:"message"`
	Reason   CommunityLeaveActionResultReason `json:"reason"`
}

// CommunityLeaveActionResultReason defines model for CommunityLeaveActionResult.Reason.
type CommunityLeaveActionResultReason string

// CommunityMediaTimelineResponse defines model for CommunityMediaTimelineResponse.
type CommunityMediaTimelineResponse struct {
	Data   MediaCommunityTweetData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// CommunityPinActionResult defines model for CommunityPinActionResult.
type CommunityPinActionResult struct {
	Typename TypeName `json:"__typename"`
}

// CommunityRelationship defines model for CommunityRelationship.
type CommunityRelationship struct {
	Actions         CommunityActions       `json:"actions"`
	Id              string                 `json:"id"`
	ModerationState map[string]interface{} `json:"moderation_state"`
	RestId          string                 `json:"rest_id"`
}

// CommunityRule defines model for CommunityRule.
type CommunityRule struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	RestId      string  `json:"rest_id"`
}

// CommunityTweetsTimelineResponse defines model for CommunityTweetsTimelineResponse.
type CommunityTweetsTimelineResponse struct {
	Data   RankedCommunityTweetData `json:"data"`
	Errors *[]ErrorResponse         `json:"errors,omitempty"`
}

// CommunityUnpinActionResult defines model for CommunityUnpinActionResult.
type CommunityUnpinActionResult struct {
	Typename TypeName `json:"__typename"`
}

// CommunityUrls defines model for CommunityUrls.
type CommunityUrls struct {
	Permalink CommunityUrlsPermalink `json:"permalink"`
}

// CommunityUrlsPermalink defines model for CommunityUrlsPermalink.
type CommunityUrlsPermalink struct {
	Url string `json:"url"`
}

// ContentEntryType defines model for ContentEntryType.
type ContentEntryType string

// ContentItemType defines model for ContentItemType.
type ContentItemType string

// ContentUnion defines model for ContentUnion.
type ContentUnion struct {
	union json.RawMessage
}

// CoverCta defines model for CoverCta.
type CoverCta struct {
	Text            *string               `json:"Text,omitempty"`
	ButtonStyle     *CoverCtaButtonStyle  `json:"buttonStyle,omitempty"`
	Callbacks       []Callback            `json:"callbacks"`
	ClientEventInfo CtaClientEventInfo    `json:"clientEventInfo"`
	CtaBehavior     TimelineCoverBehavior `json:"ctaBehavior"`
}

// CoverCtaButtonStyle defines model for CoverCta.ButtonStyle.
type CoverCtaButtonStyle string

// CreateBookmarkResponse defines model for CreateBookmarkResponse.
type CreateBookmarkResponse struct {
	Data   CreateBookmarkResponseData `json:"data"`
	Errors *[]ErrorResponse           `json:"errors,omitempty"`
}

// CreateBookmarkResponseData defines model for CreateBookmarkResponseData.
type CreateBookmarkResponseData struct {
	TweetBookmarkPut *string `json:"tweet_bookmark_put,omitempty"`
}

// CreateRetweet defines model for CreateRetweet.
type CreateRetweet struct {
	Result Retweet `json:"result"`
}

// CreateRetweetResponse defines model for CreateRetweetResponse.
type CreateRetweetResponse struct {
	Data   CreateRetweetResponseData `json:"data"`
	Errors *[]ErrorResponse          `json:"errors,omitempty"`
}

// CreateRetweetResponseData defines model for CreateRetweetResponseData.
type CreateRetweetResponseData struct {
	CreateRetweet *CreateRetweetResponseResult `json:"create_retweet,omitempty"`
}

// CreateRetweetResponseResult defines model for CreateRetweetResponseResult.
type CreateRetweetResponseResult struct {
	RetweetResults CreateRetweet `json:"retweet_results"`
}

// CreateTweet defines model for CreateTweet.
type CreateTweet struct {
	Result Tweet `json:"result"`
}

// CreateTweetResponse defines model for CreateTweetResponse.
type CreateTweetResponse struct {
	Data   CreateTweetResponseData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// CreateTweetResponseData defines model for CreateTweetResponseData.
type CreateTweetResponseData struct {
	CreateTweet *CreateTweetResponseResult `json:"create_tweet,omitempty"`
}

// CreateTweetResponseResult defines model for CreateTweetResponseResult.
type CreateTweetResponseResult struct {
	TweetResults CreateTweet `json:"tweet_results"`
}

// CtaClientEventInfo defines model for CtaClientEventInfo.
type CtaClientEventInfo struct {
	Action CtaClientEventInfoAction `json:"action"`
}

// CtaClientEventInfoAction defines model for CtaClientEventInfo.Action.
type CtaClientEventInfoAction string

// CursorType defines model for CursorType.
type CursorType string

// DeleteBookmarkResponse defines model for DeleteBookmarkResponse.
type DeleteBookmarkResponse struct {
	Data   DeleteBookmarkResponseData `json:"data"`
	Errors *[]ErrorResponse           `json:"errors,omitempty"`
}

// DeleteBookmarkResponseData defines model for DeleteBookmarkResponseData.
type DeleteBookmarkResponseData struct {
	TweetBookmarkDelete *string `json:"tweet_bookmark_delete,omitempty"`
}

// DeleteRetweet defines model for DeleteRetweet.
type DeleteRetweet struct {
	Result map[string]interface{} `json:"result"`
}

// DeleteRetweetResponse defines model for DeleteRetweetResponse.
type DeleteRetweetResponse struct {
	Data   DeleteRetweetResponseData `json:"data"`
	Errors *[]ErrorResponse          `json:"errors,omitempty"`
}

// DeleteRetweetResponseData defines model for DeleteRetweetResponseData.
type DeleteRetweetResponseData struct {
	CreateRetweet *DeleteRetweetResponseResult `json:"create_retweet,omitempty"`
}

// DeleteRetweetResponseResult defines model for DeleteRetweetResponseResult.
type DeleteRetweetResponseResult struct {
	RetweetResults *DeleteRetweet `json:"retweet_results,omitempty"`
}

// DeleteTweetResponse defines model for DeleteTweetResponse.
type DeleteTweetResponse struct {
	Data   DeleteTweetResponseData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// DeleteTweetResponseData defines model for DeleteTweetResponseData.
type DeleteTweetResponseData struct {
	DeleteRetweet *DeleteTweetResponseResult `json:"delete_retweet,omitempty"`
}

// DeleteTweetResponseResult defines model for DeleteTweetResponseResult.
type DeleteTweetResponseResult struct {
	TweetResults map[string]interface{} `json:"tweet_results"`
}

// DisplayTreatment defines model for DisplayTreatment.
type DisplayTreatment struct {
	ActionText string  `json:"actionText"`
	LabelText  *string `json:"labelText,omitempty"`
}

// DisplayType defines model for DisplayType.
type DisplayType string

// Entities defines model for Entities.
type Entities struct {
	Hashtags     []Hashtag     `json:"hashtags"`
	Media        *[]Media      `json:"media,omitempty"`
	Symbols      []Symbol      `json:"symbols"`
	Timestamps   *[]Timestamp  `json:"timestamps,omitempty"`
	Urls         []Url         `json:"urls"`
	UserMentions []UserMention `json:"user_mentions"`
}

// ErrorExtensions defines model for ErrorExtensions.
type ErrorExtensions struct {
	Code       int     `json:"code"`
	Kind       string  `json:"kind"`
	Name       string  `json:"name"`
	RetryAfter *int    `json:"retry_after,omitempty"`
	Source     string  `json:"source"`
	Tracing    Tracing `json:"tracing"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code       int                       `json:"code"`
	Extensions ErrorExtensions           `json:"extensions"`
	Kind       string                    `json:"kind"`
	Locations  []Location                `json:"locations"`
	Message    string                    `json:"message"`
	Name       string                    `json:"name"`
	Path       []ErrorResponse_Path_Item `json:"path"`
	RetryAfter *int                      `json:"retry_after,omitempty"`
	Source     string                    `json:"source"`
	Tracing    Tracing                   `json:"tracing"`
}

// ErrorResponsePath0 defines model for .
type ErrorResponsePath0 = string

// ErrorResponsePath1 defines model for .
type ErrorResponsePath1 = int

// ErrorResponse_Path_Item defines model for ErrorResponse.path.Item.
type ErrorResponse_Path_Item struct {
	union json.RawMessage
}

// ExtMediaAvailability defines model for ExtMediaAvailability.
type ExtMediaAvailability struct {
	Reason *string                     `json:"reason,omitempty"`
	Status *ExtMediaAvailabilityStatus `json:"status,omitempty"`
}

// ExtMediaAvailabilityStatus defines model for ExtMediaAvailability.Status.
type ExtMediaAvailabilityStatus string

// ExtendedEntities defines model for ExtendedEntities.
type ExtendedEntities struct {
	Media []MediaExtended `json:"media"`
}

// FavoriteTweet defines model for FavoriteTweet.
type FavoriteTweet struct {
	FavoriteTweet *string `json:"favorite_tweet,omitempty"`
}

// FavoriteTweetResponse defines model for FavoriteTweetResponse.
type FavoriteTweetResponse struct {
	Data   FavoriteTweet    `json:"data"`
	Errors *[]ErrorResponse `json:"errors,omitempty"`
}

// FeedbackInfo defines model for FeedbackInfo.
type FeedbackInfo struct {
	ClientEventInfo *ClientEventInfo `json:"clientEventInfo,omitempty"`
	FeedbackKeys    *[]string        `json:"feedbackKeys,omitempty"`
}

// FollowResponse defines model for FollowResponse.
type FollowResponse struct {
	Data   FollowResponseData `json:"data"`
	Errors *[]ErrorResponse   `json:"errors,omitempty"`
}

// FollowResponseData defines model for FollowResponseData.
type FollowResponseData struct {
	User *FollowResponseUser `json:"user,omitempty"`
}

// FollowResponseResult defines model for FollowResponseResult.
type FollowResponseResult struct {
	Typename TypeName       `json:"__typename"`
	Timeline FollowTimeline `json:"timeline"`
}

// FollowResponseUser defines model for FollowResponseUser.
type FollowResponseUser struct {
	Result FollowResponseResult `json:"result"`
}

// FollowTimeline defines model for FollowTimeline.
type FollowTimeline struct {
	Timeline Timeline `json:"timeline"`
}

// GrokImageAnnotation defines model for GrokImageAnnotation.
type GrokImageAnnotation struct {
	Prompt          string `json:"prompt"`
	UpsampledPrompt string `json:"upsampled_prompt"`
}

// GrokShareAttachment defines model for GrokShareAttachment.
type GrokShareAttachment struct {
	Items []GrokShareAttachmentItem `json:"items"`
}

// GrokShareAttachmentItem defines model for GrokShareAttachmentItem.
type GrokShareAttachmentItem struct {
	AnalysisPostIdResults *AnalysisResults `json:"analysis_post_id_results,omitempty"`
	MediaUrls             []string         `json:"media_urls"`
	Message               string           `json:"message"`
}

// Hashtag defines model for Hashtag.
type Hashtag map[string]interface{}

// Highlight defines model for Highlight.
type Highlight struct {
	TextHighlights []TextHighlight `json:"textHighlights"`
}

// HomeTimelineHome defines model for HomeTimelineHome.
type HomeTimelineHome struct {
	HomeTimelineUrt Timeline `json:"home_timeline_urt"`
}

// HomeTimelineResponseData defines model for HomeTimelineResponseData.
type HomeTimelineResponseData struct {
	Home HomeTimelineHome `json:"home"`
}

// InstructionType defines model for InstructionType.
type InstructionType string

// InstructionUnion defines model for InstructionUnion.
type InstructionUnion struct {
	union json.RawMessage
}

// ItemContentUnion defines model for ItemContentUnion.
type ItemContentUnion struct {
	union json.RawMessage
}

// ItemResult defines model for ItemResult.
type ItemResult struct {
	Typename *TypeName   `json:"__typename,omitempty"`
	Result   *TweetUnion `json:"result,omitempty"`
}

// LimitedActionResultsData defines model for LimitedActionResultsData.
type LimitedActionResultsData struct {
	Action LimitedActionResultsDataAction `json:"action"`
}

// LimitedActionResultsDataAction defines model for LimitedActionResultsData.Action.
type LimitedActionResultsDataAction string

// ListLatestTweetsTimelineResponse defines model for ListLatestTweetsTimelineResponse.
type ListLatestTweetsTimelineResponse struct {
	Data   ListTweetsTimelineData `json:"data"`
	Errors *[]ErrorResponse       `json:"errors,omitempty"`
}

// ListTweetsTimelineData defines model for ListTweetsTimelineData.
type ListTweetsTimelineData struct {
	List ListTweetsTimelineList `json:"list"`
}

// ListTweetsTimelineList defines model for ListTweetsTimelineList.
type ListTweetsTimelineList struct {
	TweetsTimeline TimelineResult `json:"tweets_timeline"`
}

// Location defines model for Location.
type Location struct {
	Column int `json:"column"`
	Line   int `json:"line"`
}

// Media defines model for Media.
type Media struct {
	AdditionalMediaInfo   *AdditionalMediaInfo    `json:"additional_media_info,omitempty"`
	AllowDownloadStatus   *AllowDownloadStatus    `json:"allow_download_status,omitempty"`
	DisplayUrl            string                  `json:"display_url"`
	ExpandedUrl           string                  `json:"expanded_url"`
	ExtAltText            *string                 `json:"ext_alt_text,omitempty"`
	ExtMediaAvailability  ExtMediaAvailability    `json:"ext_media_availability"`
	Features              *map[string]interface{} `json:"features,omitempty"`
	IdStr                 string                  `json:"id_str"`
	Indices               []int                   `json:"indices"`
	MediaKey              string                  `json:"media_key"`
	MediaResults          *MediaResults           `json:"media_results,omitempty"`
	MediaUrlHttps         string                  `json:"media_url_https"`
	OriginalInfo          MediaOriginalInfo       `json:"original_info"`
	SensitiveMediaWarning *SensitiveMediaWarning  `json:"sensitive_media_warning,omitempty"`
	Sizes                 MediaSizes              `json:"sizes"`
	SourceStatusIdStr     *string                 `json:"source_status_id_str,omitempty"`
	SourceUserIdStr       *string                 `json:"source_user_id_str,omitempty"`
	Type                  MediaType               `json:"type"`
	Url                   string                  `json:"url"`
	VideoInfo             *MediaVideoInfo         `json:"video_info,omitempty"`
}

// MediaType defines model for Media.Type.
type MediaType string

// MediaCommunityResult defines model for MediaCommunityResult.
type MediaCommunityResult struct {
	Typename               TypeName       `json:"__typename"`
	CommunityMediaTimeline TimelineResult `json:"community_media_timeline"`
}

// MediaCommunityResults defines model for MediaCommunityResults.
type MediaCommunityResults struct {
	Result MediaCommunityResult `json:"result"`
}

// MediaCommunityTweetData defines model for MediaCommunityTweetData.
type MediaCommunityTweetData struct {
	CommunityResults MediaCommunityResults `json:"communityResults"`
}

// MediaExtended defines model for MediaExtended.
type MediaExtended struct {
	AdditionalMediaInfo   *AdditionalMediaInfo    `json:"additional_media_info,omitempty"`
	AllowDownloadStatus   *AllowDownloadStatus    `json:"allow_download_status,omitempty"`
	DisplayUrl            string                  `json:"display_url"`
	ExpandedUrl           string                  `json:"expanded_url"`
	ExtAltText            *string                 `json:"ext_alt_text,omitempty"`
	ExtMediaAvailability  *ExtMediaAvailability   `json:"ext_media_availability,omitempty"`
	Features              *map[string]interface{} `json:"features,omitempty"`
	IdStr                 string                  `json:"id_str"`
	Indices               []int                   `json:"indices"`
	MediaStats            *MediaStats             `json:"mediaStats,omitempty"`
	MediaKey              string                  `json:"media_key"`
	MediaResults          *MediaResults           `json:"media_results,omitempty"`
	MediaUrlHttps         string                  `json:"media_url_https"`
	OriginalInfo          MediaOriginalInfo       `json:"original_info"`
	SensitiveMediaWarning *SensitiveMediaWarning  `json:"sensitive_media_warning,omitempty"`
	Sizes                 MediaSizes              `json:"sizes"`
	SourceStatusIdStr     *string                 `json:"source_status_id_str,omitempty"`
	SourceUserIdStr       *string                 `json:"source_user_id_str,omitempty"`
	Type                  MediaExtendedType       `json:"type"`
	Url                   string                  `json:"url"`
	VideoInfo             *MediaVideoInfo         `json:"video_info,omitempty"`
}

// MediaExtendedType defines model for MediaExtended.Type.
type MediaExtendedType string

// MediaOriginalInfo defines model for MediaOriginalInfo.
type MediaOriginalInfo struct {
	FocusRects *[]MediaOriginalInfoFocusRect `json:"focus_rects,omitempty"`
	Height     int                           `json:"height"`
	Width      int                           `json:"width"`
}

// MediaOriginalInfoFocusRect defines model for MediaOriginalInfoFocusRect.
type MediaOriginalInfoFocusRect struct {
	H int `json:"h"`
	W int `json:"w"`
	X int `json:"x"`
	Y int `json:"y"`
}

// MediaResult defines model for MediaResult.
type MediaResult struct {
	GrokImageAnnotation *GrokImageAnnotation `json:"grok_image_annotation,omitempty"`
	MediaKey            string               `json:"media_key"`
}

// MediaResults defines model for MediaResults.
type MediaResults struct {
	Result MediaResult `json:"result"`
}

// MediaSize defines model for MediaSize.
type MediaSize struct {
	H      int             `json:"h"`
	Resize MediaSizeResize `json:"resize"`
	W      int             `json:"w"`
}

// MediaSizeResize defines model for MediaSize.Resize.
type MediaSizeResize string

// MediaSizes defines model for MediaSizes.
type MediaSizes struct {
	Large  MediaSize `json:"large"`
	Medium MediaSize `json:"medium"`
	Small  MediaSize `json:"small"`
	Thumb  MediaSize `json:"thumb"`
}

// MediaStats defines model for MediaStats.
type MediaStats struct {
	ViewCount int `json:"viewCount"`
}

// MediaVideoInfo defines model for MediaVideoInfo.
type MediaVideoInfo struct {
	AspectRatio    []int                   `json:"aspect_ratio"`
	DurationMillis *int                    `json:"duration_millis,omitempty"`
	Variants       []MediaVideoInfoVariant `json:"variants"`
}

// MediaVideoInfoVariant defines model for MediaVideoInfoVariant.
type MediaVideoInfoVariant struct {
	Bitrate     *int   `json:"bitrate,omitempty"`
	ContentType string `json:"content_type"`
	Url         string `json:"url"`
}

// MediaVisibilityResults defines model for MediaVisibilityResults.
type MediaVisibilityResults struct {
	BlurredImageInterstitial MediaVisibilityResultsBlurredImageInterstitial `json:"blurred_image_interstitial"`
}

// MediaVisibilityResultsBlurredImageInterstitial defines model for MediaVisibilityResultsBlurredImageInterstitial.
type MediaVisibilityResultsBlurredImageInterstitial struct {
	Opacity float32               `json:"opacity"`
	Text    TweetInterstitialText `json:"text"`
	Title   TweetInterstitialText `json:"title"`
}

// ModuleEntry defines model for ModuleEntry.
type ModuleEntry struct {
	ClientEventInfo *ClientEventInfo `json:"clientEventInfo,omitempty"`
	FeedbackInfo    *FeedbackInfo    `json:"feedbackInfo,omitempty"`
	ItemContent     ItemContentUnion `json:"itemContent"`
}

// ModuleItem defines model for ModuleItem.
type ModuleItem struct {
	Dispensable *bool       `json:"dispensable,omitempty"`
	EntryId     string      `json:"entryId"`
	Item        ModuleEntry `json:"item"`
}

// NoteTweet defines model for NoteTweet.
type NoteTweet struct {
	IsExpandable     bool            `json:"is_expandable"`
	NoteTweetResults NoteTweetResult `json:"note_tweet_results"`
}

// NoteTweetResult defines model for NoteTweetResult.
type NoteTweetResult struct {
	Result NoteTweetResultData `json:"result"`
}

// NoteTweetResultData defines model for NoteTweetResultData.
type NoteTweetResultData struct {
	EntitySet Entities                 `json:"entity_set"`
	Id        string                   `json:"id"`
	Media     *NoteTweetResultMedia    `json:"media,omitempty"`
	Richtext  *NoteTweetResultRichText `json:"richtext,omitempty"`
	Text      string                   `json:"text"`
}

// NoteTweetResultMedia defines model for NoteTweetResultMedia.
type NoteTweetResultMedia struct {
	InlineMedia []NoteTweetResultMediaInlineMedia `json:"inline_media"`
}

// NoteTweetResultMediaInlineMedia defines model for NoteTweetResultMediaInlineMedia.
type NoteTweetResultMediaInlineMedia struct {
	Index   int    `json:"index"`
	MediaId string `json:"media_id"`
}

// NoteTweetResultRichText defines model for NoteTweetResultRichText.
type NoteTweetResultRichText struct {
	RichtextTags []NoteTweetResultRichTextTag `json:"richtext_tags"`
}

// NoteTweetResultRichTextTag defines model for NoteTweetResultRichTextTag.
type NoteTweetResultRichTextTag struct {
	FromIndex     int                                       `json:"from_index"`
	RichtextTypes []NoteTweetResultRichTextTagRichtextTypes `json:"richtext_types"`
	ToIndex       int                                       `json:"to_index"`
}

// NoteTweetResultRichTextTagRichtextTypes defines model for NoteTweetResultRichTextTag.RichtextTypes.
type NoteTweetResultRichTextTagRichtextTypes string

// NotificationTemplate defines model for NotificationTemplate.
type NotificationTemplate struct {
	Typename      *TypeName                 `json:"__typename,omitempty"`
	FromUsers     *[]map[string]interface{} `json:"from_users,omitempty"`
	TargetObjects *[]map[string]interface{} `json:"target_objects,omitempty"`
}

// NotificationsResult defines model for NotificationsResult.
type NotificationsResult struct {
	Typename             TypeName       `json:"__typename"`
	NotificationTimeline TimelineResult `json:"notification_timeline"`
	RestId               string         `json:"rest_id"`
}

// NotificationsTimelineData defines model for NotificationsTimelineData.
type NotificationsTimelineData struct {
	ViewerV2 NotificationsViewerV2 `json:"viewer_v2"`
}

// NotificationsTimelineResponse defines model for NotificationsTimelineResponse.
type NotificationsTimelineResponse struct {
	Data   NotificationsTimelineData `json:"data"`
	Errors *[]ErrorResponse          `json:"errors,omitempty"`
}

// NotificationsUserResults defines model for NotificationsUserResults.
type NotificationsUserResults struct {
	Result NotificationsResult `json:"result"`
}

// NotificationsViewerV2 defines model for NotificationsViewerV2.
type NotificationsViewerV2 struct {
	UserResults NotificationsUserResults `json:"user_results"`
}

// OneFactorLoginEligibility defines model for OneFactorLoginEligibility.
type OneFactorLoginEligibility struct {
	FetchStatus string `json:"fetchStatus"`
}

// OtherObjectAll defines model for OtherObjectAll.
type OtherObjectAll struct {
	Session *Session `json:"Session,omitempty"`
}

// PrimaryCommunityTopic defines model for PrimaryCommunityTopic.
type PrimaryCommunityTopic struct {
	TopicId   string `json:"topic_id"`
	TopicName string `json:"topic_name"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Data   ProfileResponseData `json:"data"`
	Errors *[]ErrorResponse    `json:"errors,omitempty"`
}

// ProfileResponseData defines model for ProfileResponseData.
type ProfileResponseData struct {
	UserResultByScreenName *UserResultByScreenName `json:"user_result_by_screen_name,omitempty"`
}

// QuotedRefResult defines model for QuotedRefResult.
type QuotedRefResult struct {
	Result *TweetUnion `json:"result,omitempty"`
}

// QuotedStatusPermalink defines model for QuotedStatusPermalink.
type QuotedStatusPermalink struct {
	Display  string `json:"display"`
	Expanded string `json:"expanded"`
	Url      string `json:"url"`
}

// RankedCommunityResult defines model for RankedCommunityResult.
type RankedCommunityResult struct {
	Typename                TypeName       `json:"__typename"`
	RankedCommunityTimeline TimelineResult `json:"ranked_community_timeline"`
}

// RankedCommunityResults defines model for RankedCommunityResults.
type RankedCommunityResults struct {
	Result RankedCommunityResult `json:"result"`
}

// RankedCommunityTweetData defines model for RankedCommunityTweetData.
type RankedCommunityTweetData struct {
	CommunityResults RankedCommunityResults `json:"communityResults"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	Legacy struct {
		FullText string `json:"full_text"`
	} `json:"legacy"`
	RestId string `json:"rest_id"`
}

// RichMessage defines model for RichMessage.
type RichMessage struct {
	Rtl  *bool   `json:"rtl,omitempty"`
	Text *string `json:"text,omitempty"`
}

// SearchByRawQuery defines model for SearchByRawQuery.
type SearchByRawQuery struct {
	SearchTimeline SearchTimeline `json:"search_timeline"`
}

// SearchTimeline defines model for SearchTimeline.
type SearchTimeline struct {
	Timeline Timeline `json:"timeline"`
}

// SearchTimelineData defines model for SearchTimelineData.
type SearchTimelineData struct {
	SearchByRawQuery SearchByRawQuery `json:"search_by_raw_query"`
}

// SearchTimelineResponse defines model for SearchTimelineResponse.
type SearchTimelineResponse struct {
	Data   SearchTimelineData `json:"data"`
	Errors *[]ErrorResponse   `json:"errors,omitempty"`
}

// SelfThread defines model for SelfThread.
type SelfThread struct {
	IdStr string `json:"id_str"`
}

// SensitiveMediaWarning defines model for SensitiveMediaWarning.
type SensitiveMediaWarning struct {
	AdultContent    *bool `json:"adult_content,omitempty"`
	GraphicViolence *bool `json:"graphic_violence,omitempty"`
	Other           *bool `json:"other,omitempty"`
}

// Session defines model for Session.
type Session struct {
	SsoInitTokens                 *map[string]interface{}              `json:"SsoInitTokens,omitempty"`
	CommunitiesActions            CommunitiesActions                   `json:"communitiesActions"`
	Country                       string                               `json:"country"`
	GuestId                       string                               `json:"guestId"`
	HasCommunityMemberships       bool                                 `json:"hasCommunityMemberships"`
	IsActiveCreator               bool                                 `json:"isActiveCreator"`
	IsRestrictedSession           bool                                 `json:"isRestrictedSession"`
	IsSuperFollowSubscriber       bool                                 `json:"isSuperFollowSubscriber"`
	Language                      string                               `json:"language"`
	OneFactorLoginEligibility     OneFactorLoginEligibility            `json:"oneFactorLoginEligibility"`
	SuperFollowersCount           int                                  `json:"superFollowersCount"`
	SuperFollowsApplicationStatus SessionSuperFollowsApplicationStatus `json:"superFollowsApplicationStatus"`
	UserFeatures                  UserFeatures                         `json:"userFeatures"`
	UserId                        string                               `json:"user_id"`
}

// SessionSuperFollowsApplicationStatus defines model for Session.SuperFollowsApplicationStatus.
type SessionSuperFollowsApplicationStatus string

// SocialContextLandingUrl defines model for SocialContextLandingUrl.
type SocialContextLandingUrl struct {
	Url                *string                         `json:"url,omitempty"`
	UrlType            *SocialContextLandingUrlUrlType `json:"urlType,omitempty"`
	UrtEndpointOptions *UrtEndpointOptions             `json:"urtEndpointOptions,omitempty"`
}

// SocialContextLandingUrlUrlType defines model for SocialContextLandingUrl.UrlType.
type SocialContextLandingUrlUrlType string

// SocialContextUnion defines model for SocialContextUnion.
type SocialContextUnion struct {
	union json.RawMessage
}

// SocialContextUnionType defines model for SocialContextUnionType.
type SocialContextUnionType string

// SuperFollowsReplyUserResult defines model for SuperFollowsReplyUserResult.
type SuperFollowsReplyUserResult struct {
	Result SuperFollowsReplyUserResultData `json:"result"`
}

// SuperFollowsReplyUserResultData defines model for SuperFollowsReplyUserResultData.
type SuperFollowsReplyUserResultData struct {
	Typename TypeName                          `json:"__typename"`
	Legacy   SuperFollowsReplyUserResultLegacy `json:"legacy"`
}

// SuperFollowsReplyUserResultLegacy defines model for SuperFollowsReplyUserResultLegacy.
type SuperFollowsReplyUserResultLegacy struct {
	ScreenName string `json:"screen_name"`
}

// Symbol defines model for Symbol.
type Symbol map[string]interface{}

// Text defines model for Text.
type Text struct {
	Entities []TextEntity `json:"entities"`
	Text     string       `json:"text"`
}

// TextEntity defines model for TextEntity.
type TextEntity struct {
	FromIndex int           `json:"fromIndex"`
	Ref       TextEntityRef `json:"ref"`
	ToIndex   int           `json:"toIndex"`
}

// TextEntityRef defines model for TextEntityRef.
type TextEntityRef struct {
	Type    TextEntityRefType    `json:"type"`
	Url     string               `json:"url"`
	UrlType TextEntityRefUrlType `json:"urlType"`
}

// TextEntityRefType defines model for TextEntityRef.Type.
type TextEntityRefType string

// TextEntityRefUrlType defines model for TextEntityRef.UrlType.
type TextEntityRefUrlType string

// TextHighlight defines model for TextHighlight.
type TextHighlight struct {
	EndIndex   int `json:"endIndex"`
	StartIndex int `json:"startIndex"`
}

// ThumbnailImage defines model for ThumbnailImage.
type ThumbnailImage struct {
	OriginalImgHeight *int    `json:"original_img_height,omitempty"`
	OriginalImgUrl    *string `json:"original_img_url,omitempty"`
	OriginalImgWidth  *int    `json:"original_img_width,omitempty"`
}

// Timeline defines model for Timeline.
type Timeline struct {
	Instructions    []InstructionUnion      `json:"instructions"`
	Metadata        *map[string]interface{} `json:"metadata,omitempty"`
	ResponseObjects *map[string]interface{} `json:"responseObjects,omitempty"`
}

// TimelineAddEntries defines model for TimelineAddEntries.
type TimelineAddEntries struct {
	Entries []TimelineAddEntry `json:"entries"`
	Type    InstructionType    `json:"type"`
}

// TimelineAddEntry defines model for TimelineAddEntry.
type TimelineAddEntry struct {
	Content   ContentUnion `json:"content"`
	EntryId   string       `json:"entryId"`
	SortIndex string       `json:"sortIndex"`
}

// TimelineAddToModule defines model for TimelineAddToModule.
type TimelineAddToModule struct {
	ModuleEntryId string          `json:"moduleEntryId"`
	ModuleItems   []ModuleItem    `json:"moduleItems"`
	Prepend       *bool           `json:"prepend,omitempty"`
	Type          InstructionType `json:"type"`
}

// TimelineClearCache defines model for TimelineClearCache.
type TimelineClearCache struct {
	Type InstructionType `json:"type"`
}

// TimelineClearEntriesUnreadState defines model for TimelineClearEntriesUnreadState.
type TimelineClearEntriesUnreadState struct {
	Type InstructionType `json:"type"`
}

// TimelineCommunity defines model for TimelineCommunity.
type TimelineCommunity struct {
	Typename             *TypeName              `json:"__typename,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimelineCoverBehavior defines model for TimelineCoverBehavior.
type TimelineCoverBehavior struct {
	Type TimelineCoverBehaviorType `json:"type"`
	Url  *TimelineCoverBehaviorUrl `json:"url,omitempty"`
}

// TimelineCoverBehaviorType defines model for TimelineCoverBehavior.Type.
type TimelineCoverBehaviorType string

// TimelineCoverBehaviorUrl defines model for TimelineCoverBehaviorUrl.
type TimelineCoverBehaviorUrl struct {
	Url     string                          `json:"url"`
	UrlType TimelineCoverBehaviorUrlUrlType `json:"url_type"`
}

// TimelineCoverBehaviorUrlUrlType defines model for TimelineCoverBehaviorUrl.UrlType.
type TimelineCoverBehaviorUrlUrlType string

// TimelineGeneralContext defines model for TimelineGeneralContext.
type TimelineGeneralContext struct {
	ContextImageUrls *[]string                          `json:"contextImageUrls,omitempty"`
	ContextType      *TimelineGeneralContextContextType `json:"contextType,omitempty"`
	LandingUrl       *SocialContextLandingUrl           `json:"landingUrl,omitempty"`
	Text             *string                            `json:"text,omitempty"`
	Type             *SocialContextUnionType            `json:"type,omitempty"`
}

// TimelineGeneralContextContextType defines model for TimelineGeneralContext.ContextType.
type TimelineGeneralContextContextType string

// TimelineHalfCover defines model for TimelineHalfCover.
type TimelineHalfCover struct {
	Dismissible          bool                                  `json:"dismissible"`
	HalfCoverDisplayType TimelineHalfCoverHalfCoverDisplayType `json:"halfCoverDisplayType"`
	ImpressionCallbacks  []Callback                            `json:"impressionCallbacks"`
	PrimaryCoverCta      CoverCta                              `json:"primaryCoverCta"`
	PrimaryText          Text                                  `json:"primaryText"`
	SecondaryText        Text                                  `json:"secondaryText"`
	Type                 TimelineHalfCoverType                 `json:"type"`
}

// TimelineHalfCoverHalfCoverDisplayType defines model for TimelineHalfCover.HalfCoverDisplayType.
type TimelineHalfCoverHalfCoverDisplayType string

// TimelineHalfCoverType defines model for TimelineHalfCover.Type.
type TimelineHalfCoverType string

// TimelineMarkEntriesUnreadGreaterThanSortIndex defines model for TimelineMarkEntriesUnreadGreaterThanSortIndex.
type TimelineMarkEntriesUnreadGreaterThanSortIndex struct {
	SortIndex *string         `json:"sort_index,omitempty"`
	Type      InstructionType `json:"type"`
}

// TimelineMessagePrompt defines model for TimelineMessagePrompt.
type TimelineMessagePrompt struct {
	Typename             *TypeName              `json:"__typename,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimelineNotification defines model for TimelineNotification.
type TimelineNotification struct {
	Typename         TypeName                `json:"__typename"`
	Id               string                  `json:"id"`
	ItemType         ContentItemType         `json:"itemType"`
	NotificationIcon string                  `json:"notification_icon"`
	NotificationUrl  SocialContextLandingUrl `json:"notification_url"`
	RichMessage      RichMessage             `json:"rich_message"`
	Template         NotificationTemplate    `json:"template"`
	TimestampMs      string                  `json:"timestamp_ms"`
}

// TimelinePinEntry defines model for TimelinePinEntry.
type TimelinePinEntry struct {
	Entry TimelineAddEntry `json:"entry"`
	Type  InstructionType  `json:"type"`
}

// TimelinePrompt defines model for TimelinePrompt.
type TimelinePrompt struct {
	Typename             *TypeName              `json:"__typename,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimelineReplaceEntry defines model for TimelineReplaceEntry.
type TimelineReplaceEntry struct {
	Entry            TimelineAddEntry `json:"entry"`
	EntryIdToReplace string           `json:"entry_id_to_replace"`
	Type             InstructionType  `json:"type"`
}

// TimelineResponse defines model for TimelineResponse.
type TimelineResponse struct {
	Data   HomeTimelineResponseData `json:"data"`
	Errors *[]ErrorResponse         `json:"errors,omitempty"`
}

// TimelineResult defines model for TimelineResult.
type TimelineResult struct {
	Id       *string   `json:"id,omitempty"`
	Timeline *Timeline `json:"timeline,omitempty"`
}

// TimelineShowAlert defines model for TimelineShowAlert.
type TimelineShowAlert struct {
	AlertType         *TimelineShowAlertAlertType       `json:"alertType,omitempty"`
	ColorConfig       *map[string]interface{}           `json:"colorConfig,omitempty"`
	DisplayDurationMs *int                              `json:"displayDurationMs,omitempty"`
	DisplayLocation   *TimelineShowAlertDisplayLocation `json:"displayLocation,omitempty"`
	IconDisplayInfo   *map[string]interface{}           `json:"iconDisplayInfo,omitempty"`
	RichText          struct {
		Entities *[]map[string]interface{} `json:"entities,omitempty"`
		Text     *string                   `json:"text,omitempty"`
	} `json:"richText"`
	TriggerDelayMs *int            `json:"triggerDelayMs,omitempty"`
	Type           InstructionType `json:"type"`
	UsersResults   []UserResults   `json:"usersResults"`
}

// TimelineShowAlertAlertType defines model for TimelineShowAlert.AlertType.
type TimelineShowAlertAlertType string

// TimelineShowAlertDisplayLocation defines model for TimelineShowAlert.DisplayLocation.
type TimelineShowAlertDisplayLocation string

// TimelineShowCover defines model for TimelineShowCover.
type TimelineShowCover struct {
	ClientEventInfo ClientEventInfo   `json:"clientEventInfo"`
	Cover           TimelineHalfCover `json:"cover"`
	Type            InstructionType   `json:"type"`
}

// TimelineTerminateTimeline defines model for TimelineTerminateTimeline.
type TimelineTerminateTimeline struct {
	Direction TimelineTerminateTimelineDirection `json:"direction"`
	Type      InstructionType                    `json:"type"`
}

// TimelineTerminateTimelineDirection defines model for TimelineTerminateTimeline.Direction.
type TimelineTerminateTimelineDirection string

// TimelineTimelineCursor defines model for TimelineTimelineCursor.
type TimelineTimelineCursor struct {
	Typename            TypeName          `json:"__typename"`
	CursorType          CursorType        `json:"cursorType"`
	DisplayTreatment    *DisplayTreatment `json:"displayTreatment,omitempty"`
	EntryType           *ContentEntryType `json:"entryType,omitempty"`
	ItemType            *ContentEntryType `json:"itemType,omitempty"`
	StopOnEmptyResponse *bool             `json:"stopOnEmptyResponse,omitempty"`
	Value               string            `json:"value"`
}

// TimelineTimelineItem defines model for TimelineTimelineItem.
type TimelineTimelineItem struct {
	Typename        TypeName                `json:"__typename"`
	ClientEventInfo *ClientEventInfo        `json:"clientEventInfo,omitempty"`
	EntryType       ContentEntryType        `json:"entryType"`
	FeedbackInfo    *map[string]interface{} `json:"feedbackInfo,omitempty"`
	ItemContent     ItemContentUnion        `json:"itemContent"`
}

// TimelineTimelineModule defines model for TimelineTimelineModule.
type TimelineTimelineModule struct {
	Typename        TypeName                `json:"__typename"`
	ClientEventInfo *ClientEventInfo        `json:"clientEventInfo,omitempty"`
	DisplayType     DisplayType             `json:"displayType"`
	EntryType       ContentEntryType        `json:"entryType"`
	FeedbackInfo    *FeedbackInfo           `json:"feedbackInfo,omitempty"`
	Footer          *map[string]interface{} `json:"footer,omitempty"`
	Header          *map[string]interface{} `json:"header,omitempty"`
	Items           *[]ModuleItem           `json:"items,omitempty"`
	Metadata        *map[string]interface{} `json:"metadata,omitempty"`
}

// TimelineTombstone defines model for TimelineTombstone.
type TimelineTombstone struct {
	Typename             *TypeName                              `json:"__typename,omitempty"`
	ItemType             *ContentItemType                       `json:"itemType,omitempty"`
	TombstoneDisplayType *TimelineTombstoneTombstoneDisplayType `json:"tombstoneDisplayType,omitempty"`
	TombstoneInfo        *TombstoneInfo                         `json:"tombstoneInfo,omitempty"`
}

// TimelineTombstoneTombstoneDisplayType defines model for TimelineTombstone.TombstoneDisplayType.
type TimelineTombstoneTombstoneDisplayType string

// TimelineTopicContext defines model for TimelineTopicContext.
type TimelineTopicContext struct {
	FunctionalityType *TimelineTopicContextFunctionalityType `json:"functionalityType,omitempty"`
	Topic             *TopicContext                          `json:"topic,omitempty"`
	Type              *SocialContextUnionType                `json:"type,omitempty"`
}

// TimelineTopicContextFunctionalityType defines model for TimelineTopicContext.FunctionalityType.
type TimelineTopicContextFunctionalityType string

// TimelineTrend defines model for TimelineTrend.
type TimelineTrend struct {
	Typename       TypeName                `json:"__typename"`
	Images         *[]TrendImage           `json:"images,omitempty"`
	IsAiTrend      *bool                   `json:"is_ai_trend,omitempty"`
	ItemType       *ContentItemType        `json:"itemType,omitempty"`
	Name           string                  `json:"name"`
	SocialContext  *SocialContextUnion     `json:"social_context,omitempty"`
	ThumbnailImage *ThumbnailImage         `json:"thumbnail_image,omitempty"`
	TrendMetadata  TrendMetadata           `json:"trend_metadata"`
	TrendUrl       SocialContextLandingUrl `json:"trend_url"`
}

// TimelineTweet defines model for TimelineTweet.
type TimelineTweet struct {
	Typename            TypeName                      `json:"__typename"`
	HasModeratedReplies *bool                         `json:"hasModeratedReplies,omitempty"`
	Highlights          *Highlight                    `json:"highlights,omitempty"`
	ItemType            ContentItemType               `json:"itemType"`
	PromotedMetadata    *map[string]interface{}       `json:"promotedMetadata,omitempty"`
	SocialContext       *SocialContextUnion           `json:"socialContext,omitempty"`
	TweetDisplayType    TimelineTweetTweetDisplayType `json:"tweetDisplayType"`
	TweetResults        ItemResult                    `json:"tweet_results"`
}

// TimelineTweetTweetDisplayType defines model for TimelineTweet.TweetDisplayType.
type TimelineTweetTweetDisplayType string

// TimelineUser defines model for TimelineUser.
type TimelineUser struct {
	Typename        TypeName                    `json:"__typename"`
	ItemType        ContentItemType             `json:"itemType"`
	SocialContext   *SocialContextUnion         `json:"socialContext,omitempty"`
	UserDisplayType TimelineUserUserDisplayType `json:"userDisplayType"`
	UserResults     UserResults                 `json:"user_results"`
}

// TimelineUserUserDisplayType defines model for TimelineUser.UserDisplayType.
type TimelineUserUserDisplayType string

// Timestamp defines model for Timestamp.
type Timestamp struct {
	Indices []int  `json:"indices"`
	Seconds int    `json:"seconds"`
	Text    string `json:"text"`
}

// TombstoneEntity defines model for TombstoneEntity.
type TombstoneEntity struct {
	FromIndex *int          `json:"fromIndex,omitempty"`
	Ref       *TombstoneRef `json:"ref,omitempty"`
	ToIndex   *int          `json:"toIndex,omitempty"`
}

// TombstoneInfo defines model for TombstoneInfo.
type TombstoneInfo struct {
	RichText *TombstoneRichText `json:"richText,omitempty"`
	Text     *string            `json:"text,omitempty"`
}

// TombstoneRef defines model for TombstoneRef.
type TombstoneRef struct {
	Type    *TombstoneRefType    `json:"type,omitempty"`
	Url     *string              `json:"url,omitempty"`
	UrlType *TombstoneRefUrlType `json:"urlType,omitempty"`
}

// TombstoneRefType defines model for TombstoneRef.Type.
type TombstoneRefType string

// TombstoneRefUrlType defines model for TombstoneRef.UrlType.
type TombstoneRefUrlType string

// TombstoneRichText defines model for TombstoneRichText.
type TombstoneRichText struct {
	Entities *[]TombstoneEntity `json:"entities,omitempty"`
	Rtl      *bool              `json:"rtl,omitempty"`
	Text     *string            `json:"text,omitempty"`
}

// TopicContext defines model for TopicContext.
type TopicContext struct {
	Description   *string `json:"description,omitempty"`
	Following     *bool   `json:"following,omitempty"`
	IconUrl       *string `json:"icon_url,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	NotInterested *bool   `json:"not_interested,omitempty"`
	TopicId       *string `json:"topic_id,omitempty"`
}

// Tracing defines model for Tracing.
type Tracing struct {
	TraceId string `json:"trace_id"`
}

// TrendImage defines model for TrendImage.
type TrendImage struct {
	Url *string `json:"url,omitempty"`
}

// TrendMetadata defines model for TrendMetadata.
type TrendMetadata struct {
	Url *SocialContextLandingUrl `json:"url,omitempty"`
}

// TrendResults defines model for TrendResults.
type TrendResults struct {
	RestId string `json:"rest_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Typename                    *TypeName                    `json:"__typename,omitempty"`
	Article                     *Article                     `json:"article,omitempty"`
	AuthorCommunityRelationship *AuthorCommunityRelationship `json:"author_community_relationship,omitempty"`
	BirdwatchPivot              *BirdwatchPivot              `json:"birdwatch_pivot,omitempty"`
	Card                        *TweetCard                   `json:"card,omitempty"`
	CommunityRelationship       *CommunityRelationship       `json:"community_relationship,omitempty"`
	CommunityResults            *Community                   `json:"community_results,omitempty"`
	Core                        *UserResultCore              `json:"core,omitempty"`
	EditControl                 *TweetEditControl            `json:"edit_control,omitempty"`
	EditPrespective             *TweetEditPrespective        `json:"edit_prespective,omitempty"`
	GrokAnalysisButton          *bool                        `json:"grok_analysis_button,omitempty"`
	GrokAnalysisFollowups       *[]string                    `json:"grok_analysis_followups,omitempty"`
	GrokShareAttachment         *GrokShareAttachment         `json:"grok_share_attachment,omitempty"`
	HasBirdwatchNotes           *bool                        `json:"has_birdwatch_notes,omitempty"`
	IsTranslatable              *bool                        `json:"is_translatable,omitempty"`
	Legacy                      *TweetLegacy                 `json:"legacy,omitempty"`
	NoteTweet                   *NoteTweet                   `json:"note_tweet,omitempty"`
	PreviousCounts              *TweetPreviousCounts         `json:"previous_counts,omitempty"`
	QuickPromoteEligibility     *map[string]interface{}      `json:"quick_promote_eligibility,omitempty"`
	QuotedRefResult             *QuotedRefResult             `json:"quotedRefResult,omitempty"`
	QuotedStatusResult          *ItemResult                  `json:"quoted_status_result,omitempty"`
	RestId                      string                       `json:"rest_id"`
	Source                      *string                      `json:"source,omitempty"`
	SuperFollowsReplyUserResult *SuperFollowsReplyUserResult `json:"superFollowsReplyUserResult,omitempty"`
	TrendResults                *TrendResults                `json:"trend_results,omitempty"`
	UnifiedCard                 *UnifiedCard                 `json:"unified_card,omitempty"`
	UnmentionData               *map[string]interface{}      `json:"unmention_data,omitempty"`
	Views                       *TweetView                   `json:"views,omitempty"`
}

// TweetCard defines model for TweetCard.
type TweetCard struct {
	Legacy *TweetCardLegacy `json:"legacy,omitempty"`
	RestId *string          `json:"rest_id,omitempty"`
}

// TweetCardLegacy defines model for TweetCardLegacy.
type TweetCardLegacy struct {
	BindingValues   []TweetCardLegacyBindingValue `json:"binding_values"`
	CardPlatform    *TweetCardPlatformData        `json:"card_platform,omitempty"`
	Name            string                        `json:"name"`
	Url             string                        `json:"url"`
	UserRefsResults *[]UserResults                `json:"user_refs_results,omitempty"`
}

// TweetCardLegacyBindingValue defines model for TweetCardLegacyBindingValue.
type TweetCardLegacyBindingValue struct {
	Key   string                          `json:"key"`
	Value TweetCardLegacyBindingValueData `json:"value"`
}

// TweetCardLegacyBindingValueData defines model for TweetCardLegacyBindingValueData.
type TweetCardLegacyBindingValueData struct {
	BooleanValue    *bool                                 `json:"boolean_value,omitempty"`
	ImageColorValue *map[string]interface{}               `json:"image_color_value,omitempty"`
	ImageValue      *TweetCardLegacyBindingValueDataImage `json:"image_value,omitempty"`
	ScribeKey       *string                               `json:"scribe_key,omitempty"`
	StringValue     *string                               `json:"string_value,omitempty"`
	Type            string                                `json:"type"`
	UserValue       *UserValue                            `json:"user_value,omitempty"`
}

// TweetCardLegacyBindingValueDataImage defines model for TweetCardLegacyBindingValueDataImage.
type TweetCardLegacyBindingValueDataImage struct {
	Alt    *string `json:"alt,omitempty"`
	Height int     `json:"height"`
	Url    string  `json:"url"`
	Width  int     `json:"width"`
}

// TweetCardPlatform defines model for TweetCardPlatform.
type TweetCardPlatform struct {
	Audience TweetCardPlatformAudience `json:"audience"`
	Device   TweetCardPlatformDevice   `json:"device"`
}

// TweetCardPlatformAudience defines model for TweetCardPlatformAudience.
type TweetCardPlatformAudience struct {
	Name TweetCardPlatformAudienceName `json:"name"`
}

// TweetCardPlatformAudienceName defines model for TweetCardPlatformAudience.Name.
type TweetCardPlatformAudienceName string

// TweetCardPlatformData defines model for TweetCardPlatformData.
type TweetCardPlatformData struct {
	Platform TweetCardPlatform `json:"platform"`
}

// TweetCardPlatformDevice defines model for TweetCardPlatformDevice.
type TweetCardPlatformDevice struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// TweetDetailResponse defines model for TweetDetailResponse.
type TweetDetailResponse struct {
	Data   TweetDetailResponseData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// TweetDetailResponseData defines model for TweetDetailResponseData.
type TweetDetailResponseData struct {
	ThreadedConversationWithInjectionsV2 *Timeline `json:"threaded_conversation_with_injections_v2,omitempty"`
}

// TweetEditControl defines model for TweetEditControl.
type TweetEditControl struct {
	EditControlInitial *TweetEditControlInitial `json:"edit_control_initial,omitempty"`
	EditTweetIds       *[]string                `json:"edit_tweet_ids,omitempty"`
	EditableUntilMsecs *string                  `json:"editable_until_msecs,omitempty"`
	EditsRemaining     *string                  `json:"edits_remaining,omitempty"`
	InitialTweetId     *string                  `json:"initial_tweet_id,omitempty"`
	IsEditEligible     *bool                    `json:"is_edit_eligible,omitempty"`
}

// TweetEditControlInitial defines model for TweetEditControlInitial.
type TweetEditControlInitial struct {
	EditTweetIds       []string `json:"edit_tweet_ids"`
	EditableUntilMsecs string   `json:"editable_until_msecs"`
	EditsRemaining     string   `json:"edits_remaining"`
	IsEditEligible     bool     `json:"is_edit_eligible"`
}

// TweetEditPrespective defines model for TweetEditPrespective.
type TweetEditPrespective struct {
	Favorited *bool `json:"favorited,omitempty"`
	Retweeted *bool `json:"retweeted,omitempty"`
}

// TweetFavoritersResponse defines model for TweetFavoritersResponse.
type TweetFavoritersResponse struct {
	Data   TweetFavoritersResponseData `json:"data"`
	Errors *[]ErrorResponse            `json:"errors,omitempty"`
}

// TweetFavoritersResponseData defines model for TweetFavoritersResponseData.
type TweetFavoritersResponseData struct {
	FavoritersTimeline *TimelineResult `json:"favoriters_timeline,omitempty"`
}

// TweetInterstitial defines model for TweetInterstitial.
type TweetInterstitial struct {
	Typename    TypeName                     `json:"__typename"`
	DisplayType TweetInterstitialDisplayType `json:"displayType"`
	RevealText  TweetInterstitialRevealText  `json:"revealText"`
	Text        TweetInterstitialText        `json:"text"`
}

// TweetInterstitialDisplayType defines model for TweetInterstitial.DisplayType.
type TweetInterstitialDisplayType string

// TweetInterstitialRevealText defines model for TweetInterstitialRevealText.
type TweetInterstitialRevealText struct {
	Entities []TweetInterstitialTextEntity `json:"entities"`
	Rtl      bool                          `json:"rtl"`
	Text     string                        `json:"text"`
}

// TweetInterstitialText defines model for TweetInterstitialText.
type TweetInterstitialText struct {
	Entities []TweetInterstitialTextEntity `json:"entities"`
	Rtl      bool                          `json:"rtl"`
	Text     string                        `json:"text"`
}

// TweetInterstitialTextEntity defines model for TweetInterstitialTextEntity.
type TweetInterstitialTextEntity struct {
	FromIndex int                            `json:"fromIndex"`
	Ref       TweetInterstitialTextEntityRef `json:"ref"`
	ToIndex   int                            `json:"toIndex"`
}

// TweetInterstitialTextEntityRef defines model for TweetInterstitialTextEntityRef.
type TweetInterstitialTextEntityRef struct {
	Type    TweetInterstitialTextEntityRefType    `json:"type"`
	Url     string                                `json:"url"`
	UrlType TweetInterstitialTextEntityRefUrlType `json:"urlType"`
}

// TweetInterstitialTextEntityRefType defines model for TweetInterstitialTextEntityRef.Type.
type TweetInterstitialTextEntityRefType string

// TweetInterstitialTextEntityRefUrlType defines model for TweetInterstitialTextEntityRef.UrlType.
type TweetInterstitialTextEntityRefUrlType string

// TweetLegacy defines model for TweetLegacy.
type TweetLegacy struct {
	BookmarkCount             int                        `json:"bookmark_count"`
	Bookmarked                bool                       `json:"bookmarked"`
	ConversationControl       *map[string]interface{}    `json:"conversation_control,omitempty"`
	ConversationIdStr         string                     `json:"conversation_id_str"`
	CreatedAt                 TwitterTimeFormat          `json:"created_at"`
	DisplayTextRange          []int                      `json:"display_text_range"`
	Entities                  Entities                   `json:"entities"`
	ExtendedEntities          *ExtendedEntities          `json:"extended_entities,omitempty"`
	FavoriteCount             int                        `json:"favorite_count"`
	Favorited                 bool                       `json:"favorited"`
	FullText                  string                     `json:"full_text"`
	IdStr                     string                     `json:"id_str"`
	InReplyToScreenName       *string                    `json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusIdStr      *string                    `json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserIdStr        *string                    `json:"in_reply_to_user_id_str,omitempty"`
	IsQuoteStatus             bool                       `json:"is_quote_status"`
	Lang                      string                     `json:"lang"`
	LimitedActions            *TweetLegacyLimitedActions `json:"limited_actions,omitempty"`
	Place                     *map[string]interface{}    `json:"place,omitempty"`
	PossiblySensitive         *bool                      `json:"possibly_sensitive,omitempty"`
	PossiblySensitiveEditable *bool                      `json:"possibly_sensitive_editable,omitempty"`
	QuoteCount                int                        `json:"quote_count"`
	QuotedStatusIdStr         *string                    `json:"quoted_status_id_str,omitempty"`
	QuotedStatusPermalink     *QuotedStatusPermalink     `json:"quoted_status_permalink,omitempty"`
	ReplyCount                int                        `json:"reply_count"`
	RetweetCount              int                        `json:"retweet_count"`
	Retweeted                 bool                       `json:"retweeted"`
	RetweetedStatusResult     *ItemResult                `json:"retweeted_status_result,omitempty"`
	Scopes                    *TweetLegacyScopes         `json:"scopes,omitempty"`
	SelfThread                *SelfThread                `json:"self_thread,omitempty"`
	UserIdStr                 string                     `json:"user_id_str"`
}

// TweetLegacyLimitedActions defines model for TweetLegacy.LimitedActions.
type TweetLegacyLimitedActions string

// TweetLegacyScopes defines model for TweetLegacyScopes.
type TweetLegacyScopes struct {
	Followers bool `json:"followers"`
}

// TweetLimitedActionResults defines model for TweetLimitedActionResults.
type TweetLimitedActionResults struct {
	LimitedActions []LimitedActionResultsData `json:"limited_actions"`
}

// TweetPreviewDisplay defines model for TweetPreviewDisplay.
type TweetPreviewDisplay struct {
	Typename             TypeName                  `json:"__typename"`
	Cta                  TweetPreviewDisplayCta    `json:"cta"`
	LimitedActionResults TweetLimitedActionResults `json:"limited_action_results"`
	Tweet                TweetPreviewDisplayTweet  `json:"tweet"`
}

// TweetPreviewDisplayCta defines model for TweetPreviewDisplayCta.
type TweetPreviewDisplayCta struct {
	Title string                    `json:"title"`
	Url   TweetPreviewDisplayCtaUrl `json:"url"`
}

// TweetPreviewDisplayCtaUrl defines model for TweetPreviewDisplayCtaUrl.
type TweetPreviewDisplayCtaUrl struct {
	Url     string                           `json:"url"`
	UrlType TweetPreviewDisplayCtaUrlUrlType `json:"urlType"`
}

// TweetPreviewDisplayCtaUrlUrlType defines model for TweetPreviewDisplayCtaUrl.UrlType.
type TweetPreviewDisplayCtaUrlUrlType string

// TweetPreviewDisplayTweet defines model for TweetPreviewDisplayTweet.
type TweetPreviewDisplayTweet struct {
	BookmarkCount int                               `json:"bookmark_count"`
	Core          UserResultCore                    `json:"core"`
	CreatedAt     TwitterTimeFormat                 `json:"created_at"`
	Entities      map[string]interface{}            `json:"entities"`
	FavoriteCount int                               `json:"favorite_count"`
	QuoteCount    int                               `json:"quote_count"`
	ReplyCount    int                               `json:"reply_count"`
	RestId        string                            `json:"rest_id"`
	RetweetCount  int                               `json:"retweet_count"`
	Text          string                            `json:"text"`
	ViewCount     TweetPreviewDisplayTweetViewCount `json:"view_count"`
}

// TweetPreviewDisplayTweetViewCount defines model for TweetPreviewDisplayTweetViewCount.
type TweetPreviewDisplayTweetViewCount struct {
	Count string `json:"count"`
}

// TweetPreviousCounts defines model for TweetPreviousCounts.
type TweetPreviousCounts struct {
	BookmarkCount int `json:"bookmark_count"`
	FavoriteCount int `json:"favorite_count"`
	QuoteCount    int `json:"quote_count"`
	ReplyCount    int `json:"reply_count"`
	RetweetCount  int `json:"retweet_count"`
}

// TweetResultByRestIdData defines model for TweetResultByRestIdData.
type TweetResultByRestIdData struct {
	TweetResult *ItemResult `json:"tweetResult,omitempty"`
}

// TweetResultByRestIdResponse defines model for TweetResultByRestIdResponse.
type TweetResultByRestIdResponse struct {
	Data   TweetResultByRestIdData `json:"data"`
	Errors *[]ErrorResponse        `json:"errors,omitempty"`
}

// TweetRetweetersResponse defines model for TweetRetweetersResponse.
type TweetRetweetersResponse struct {
	Data   TweetRetweetersResponseData `json:"data"`
	Errors *[]ErrorResponse            `json:"errors,omitempty"`
}

// TweetRetweetersResponseData defines model for TweetRetweetersResponseData.
type TweetRetweetersResponseData struct {
	RetweetersTimeline *TimelineResult `json:"retweeters_timeline,omitempty"`
}

// TweetTombstone defines model for TweetTombstone.
type TweetTombstone struct {
	Typename             *TypeName              `json:"__typename,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TweetUnavailable defines model for TweetUnavailable.
type TweetUnavailable struct {
	Typename *TypeName `json:"__typename,omitempty"`
	Reason   *string   `json:"reason,omitempty"`
}

// TweetUnion defines model for TweetUnion.
type TweetUnion struct {
	union json.RawMessage
}

// TweetView defines model for TweetView.
type TweetView struct {
	Count *string        `json:"count,omitempty"`
	State TweetViewState `json:"state"`
}

// TweetViewState defines model for TweetView.State.
type TweetViewState string

// TweetWithVisibilityResults defines model for TweetWithVisibilityResults.
type TweetWithVisibilityResults struct {
	Typename               TypeName                `json:"__typename"`
	LimitedActionResults   *map[string]interface{} `json:"limitedActionResults,omitempty"`
	MediaVisibilityResults *MediaVisibilityResults `json:"mediaVisibilityResults,omitempty"`
	Tweet                  Tweet                   `json:"tweet"`
	TweetInterstitial      *TweetInterstitial      `json:"tweetInterstitial,omitempty"`
}

// TwitterTimeFormat defines model for TwitterTimeFormat.
type TwitterTimeFormat = string

// TypeName defines model for TypeName.
type TypeName string

// UnfavoriteTweet defines model for UnfavoriteTweet.
type UnfavoriteTweet struct {
	UnfavoriteTweet *string `json:"unfavorite_tweet,omitempty"`
}

// UnfavoriteTweetResponse defines model for UnfavoriteTweetResponse.
type UnfavoriteTweetResponse struct {
	Data   UnfavoriteTweet  `json:"data"`
	Errors *[]ErrorResponse `json:"errors,omitempty"`
}

// UnifiedCard defines model for UnifiedCard.
type UnifiedCard struct {
	CardFetchState UnifiedCardCardFetchState `json:"card_fetch_state"`
}

// UnifiedCardCardFetchState defines model for UnifiedCard.CardFetchState.
type UnifiedCardCardFetchState string

// Url defines model for Url.
type Url struct {
	DisplayUrl  string  `json:"display_url"`
	ExpandedUrl *string `json:"expanded_url,omitempty"`
	Indices     []int   `json:"indices"`
	Url         string  `json:"url"`
}

// UrtEndpointOptions defines model for UrtEndpointOptions.
type UrtEndpointOptions struct {
	RequestParams []UrtEndpointRequestParams `json:"requestParams"`
	Title         string                     `json:"title"`
}

// UrtEndpointRequestParams defines model for UrtEndpointRequestParams.
type UrtEndpointRequestParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// User defines model for User.
type User struct {
	Typename                        TypeName                      `json:"__typename"`
	AffiliatesHighlightedLabel      *map[string]interface{}       `json:"affiliates_highlighted_label,omitempty"`
	BusinessAccount                 *map[string]interface{}       `json:"business_account,omitempty"`
	CreatorSubscriptionsCount       *int                          `json:"creator_subscriptions_count,omitempty"`
	HasGraduatedAccess              *bool                         `json:"has_graduated_access,omitempty"`
	HasHiddenLikesOnProfile         *bool                         `json:"has_hidden_likes_on_profile,omitempty"`
	HasHiddenSubscriptionsOnProfile *bool                         `json:"has_hidden_subscriptions_on_profile,omitempty"`
	HasNftAvatar                    *bool                         `json:"has_nft_avatar,omitempty"`
	HighlightsInfo                  *UserHighlightsInfo           `json:"highlights_info,omitempty"`
	Id                              string                        `json:"id"`
	IsBlueVerified                  bool                          `json:"is_blue_verified"`
	IsProfileTranslatable           *bool                         `json:"is_profile_translatable,omitempty"`
	Legacy                          UserLegacy                    `json:"legacy"`
	LegacyExtendedProfile           *UserLegacyExtendedProfile    `json:"legacy_extended_profile,omitempty"`
	ParodyCommentaryFanLabel        *UserParodyCommentaryFanLabel `json:"parody_commentary_fan_label,omitempty"`
	PremiumGiftingEligible          *bool                         `json:"premium_gifting_eligible,omitempty"`
	Professional                    *UserProfessional             `json:"professional,omitempty"`
	ProfileImageShape               UserProfileImageShape         `json:"profile_image_shape"`
	RestId                          string                        `json:"rest_id"`
	SuperFollowEligible             *bool                         `json:"super_follow_eligible,omitempty"`
	SuperFollowedBy                 *bool                         `json:"super_followed_by,omitempty"`
	SuperFollowing                  *bool                         `json:"super_following,omitempty"`
	TipjarSettings                  *UserTipJarSettings           `json:"tipjar_settings,omitempty"`
	UserSeedTweetCount              *int                          `json:"user_seed_tweet_count,omitempty"`
	VerificationInfo                *UserVerificationInfo         `json:"verification_info,omitempty"`
}

// UserParodyCommentaryFanLabel defines model for User.ParodyCommentaryFanLabel.
type UserParodyCommentaryFanLabel string

// UserProfileImageShape defines model for User.ProfileImageShape.
type UserProfileImageShape string

// UserFeatures defines model for UserFeatures.
type UserFeatures struct {
	MediatoolStudioLibrary bool `json:"mediatool_studio_library"`
}

// UserHighlightsInfo defines model for UserHighlightsInfo.
type UserHighlightsInfo struct {
	CanHighlightTweets bool   `json:"can_highlight_tweets"`
	HighlightedTweets  string `json:"highlighted_tweets"`
}

// UserHighlightsTweetsData defines model for UserHighlightsTweetsData.
type UserHighlightsTweetsData struct {
	User *UserHighlightsTweetsUser `json:"user,omitempty"`
}

// UserHighlightsTweetsResponse defines model for UserHighlightsTweetsResponse.
type UserHighlightsTweetsResponse struct {
	Data   UserHighlightsTweetsData `json:"data"`
	Errors *[]ErrorResponse         `json:"errors,omitempty"`
}

// UserHighlightsTweetsResult defines model for UserHighlightsTweetsResult.
type UserHighlightsTweetsResult struct {
	Typename TypeName                     `json:"__typename"`
	Timeline UserHighlightsTweetsTimeline `json:"timeline"`
}

// UserHighlightsTweetsTimeline defines model for UserHighlightsTweetsTimeline.
type UserHighlightsTweetsTimeline struct {
	Timeline Timeline `json:"timeline"`
}

// UserHighlightsTweetsUser defines model for UserHighlightsTweetsUser.
type UserHighlightsTweetsUser struct {
	Result UserHighlightsTweetsResult `json:"result"`
}

// UserLegacy defines model for UserLegacy.
type UserLegacy struct {
	BlockedBy               *bool                   `json:"blocked_by,omitempty"`
	Blocking                *bool                   `json:"blocking,omitempty"`
	CanDm                   *bool                   `json:"can_dm,omitempty"`
	CanMediaTag             *bool                   `json:"can_media_tag,omitempty"`
	CreatedAt               TwitterTimeFormat       `json:"created_at"`
	DefaultProfile          bool                    `json:"default_profile"`
	DefaultProfileImage     bool                    `json:"default_profile_image"`
	Description             string                  `json:"description"`
	Entities                map[string]interface{}  `json:"entities"`
	FastFollowersCount      int                     `json:"fast_followers_count"`
	FavouritesCount         int                     `json:"favourites_count"`
	FollowRequestSent       *bool                   `json:"follow_request_sent,omitempty"`
	FollowedBy              *bool                   `json:"followed_by,omitempty"`
	FollowersCount          int                     `json:"followers_count"`
	Following               *bool                   `json:"following,omitempty"`
	FriendsCount            int                     `json:"friends_count"`
	HasCustomTimelines      bool                    `json:"has_custom_timelines"`
	IsTranslator            bool                    `json:"is_translator"`
	ListedCount             int                     `json:"listed_count"`
	Location                string                  `json:"location"`
	MediaCount              int                     `json:"media_count"`
	Muting                  *bool                   `json:"muting,omitempty"`
	Name                    string                  `json:"name"`
	NormalFollowersCount    int                     `json:"normal_followers_count"`
	Notifications           *bool                   `json:"notifications,omitempty"`
	PinnedTweetIdsStr       []string                `json:"pinned_tweet_ids_str"`
	PossiblySensitive       bool                    `json:"possibly_sensitive"`
	ProfileBannerExtensions *map[string]interface{} `json:"profile_banner_extensions,omitempty"`
	ProfileBannerUrl        *string                 `json:"profile_banner_url,omitempty"`
	ProfileImageExtensions  *map[string]interface{} `json:"profile_image_extensions,omitempty"`
	ProfileImageUrlHttps    string                  `json:"profile_image_url_https"`
	ProfileInterstitialType string                  `json:"profile_interstitial_type"`
	Protected               *bool                   `json:"protected,omitempty"`
	ScreenName              string                  `json:"screen_name"`
	StatusesCount           int                     `json:"statuses_count"`
	TranslatorType          string                  `json:"translator_type"`
	Url                     *string                 `json:"url,omitempty"`
	Verified                bool                    `json:"verified"`
	VerifiedType            *UserLegacyVerifiedType `json:"verified_type,omitempty"`
	WantRetweets            *bool                   `json:"want_retweets,omitempty"`
	WithheldInCountries     *[]string               `json:"withheld_in_countries,omitempty"`
}

// UserLegacyVerifiedType defines model for UserLegacy.VerifiedType.
type UserLegacyVerifiedType string

// UserLegacyExtendedProfile defines model for UserLegacyExtendedProfile.
type UserLegacyExtendedProfile struct {
	Birthdate *UserLegacyExtendedProfileBirthdate `json:"birthdate,omitempty"`
}

// UserLegacyExtendedProfileBirthdate defines model for UserLegacyExtendedProfileBirthdate.
type UserLegacyExtendedProfileBirthdate struct {
	Day            int                                              `json:"day"`
	Month          int                                              `json:"month"`
	Visibility     UserLegacyExtendedProfileBirthdateVisibility     `json:"visibility"`
	Year           *int                                             `json:"year,omitempty"`
	YearVisibility UserLegacyExtendedProfileBirthdateYearVisibility `json:"year_visibility"`
}

// UserLegacyExtendedProfileBirthdateVisibility defines model for UserLegacyExtendedProfileBirthdate.Visibility.
type UserLegacyExtendedProfileBirthdateVisibility string

// UserLegacyExtendedProfileBirthdateYearVisibility defines model for UserLegacyExtendedProfileBirthdate.YearVisibility.
type UserLegacyExtendedProfileBirthdateYearVisibility string

// UserMention defines model for UserMention.
type UserMention map[string]interface{}

// UserProfessional defines model for UserProfessional.
type UserProfessional struct {
	Category         []UserProfessionalCategory       `json:"category"`
	ProfessionalType UserProfessionalProfessionalType `json:"professional_type"`
	RestId           string                           `json:"rest_id"`
}

// UserProfessionalProfessionalType defines model for UserProfessional.ProfessionalType.
type UserProfessionalProfessionalType string

// UserProfessionalCategory defines model for UserProfessionalCategory.
type UserProfessionalCategory struct {
	IconName string `json:"icon_name"`
	Id       int    `json:"id"`
	Name     string `json:"name"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data   UserResponseData `json:"data"`
	Errors *[]ErrorResponse `json:"errors,omitempty"`
}

// UserResponseData defines model for UserResponseData.
type UserResponseData struct {
	User *UserResults `json:"user,omitempty"`
}

// UserResultByScreenName defines model for UserResultByScreenName.
type UserResultByScreenName struct {
	Id     string                       `json:"id"`
	Result UserResultByScreenNameResult `json:"result"`
}

// UserResultByScreenNameLegacy defines model for UserResultByScreenNameLegacy.
type UserResultByScreenNameLegacy struct {
	BlockedBy  *bool   `json:"blocked_by,omitempty"`
	Blocking   *bool   `json:"blocking,omitempty"`
	FollowedBy *bool   `json:"followed_by,omitempty"`
	Following  *bool   `json:"following,omitempty"`
	Name       *string `json:"name,omitempty"`
	Protected  *bool   `json:"protected,omitempty"`
	ScreenName *string `json:"screen_name,omitempty"`
}

// UserResultByScreenNameResult defines model for UserResultByScreenNameResult.
type UserResultByScreenNameResult struct {
	Typename       TypeName                     `json:"__typename"`
	Id             string                       `json:"id"`
	Legacy         UserResultByScreenNameLegacy `json:"legacy"`
	Profilemodules map[string]interface{}       `json:"profilemodules"`
	RestId         string                       `json:"rest_id"`
}

// UserResultCore defines model for UserResultCore.
type UserResultCore struct {
	UserResults UserResults `json:"user_results"`
}

// UserResults defines model for UserResults.
type UserResults struct {
	Result *UserUnion `json:"result,omitempty"`
}

// UserTipJarSettings defines model for UserTipJarSettings.
type UserTipJarSettings struct {
	BandcampHandle *string `json:"bandcamp_handle,omitempty"`
	BitcoinHandle  *string `json:"bitcoin_handle,omitempty"`
	CashAppHandle  *string `json:"cash_app_handle,omitempty"`
	EthereumHandle *string `json:"ethereum_handle,omitempty"`
	GofundmeHandle *string `json:"gofundme_handle,omitempty"`
	IsEnabled      *bool   `json:"is_enabled,omitempty"`
	PatreonHandle  *string `json:"patreon_handle,omitempty"`
	PayPalHandle   *string `json:"pay_pal_handle,omitempty"`
	VenmoHandle    *string `json:"venmo_handle,omitempty"`
}

// UserTweetsData defines model for UserTweetsData.
type UserTweetsData struct {
	User *UserTweetsUser `json:"user,omitempty"`
}

// UserTweetsResponse defines model for UserTweetsResponse.
type UserTweetsResponse struct {
	Data   UserTweetsData   `json:"data"`
	Errors *[]ErrorResponse `json:"errors,omitempty"`
}

// UserTweetsResultV1 defines model for UserTweetsResultV1.
type UserTweetsResultV1 struct {
	Typename TypeName       `json:"__typename"`
	Timeline TimelineResult `json:"timeline"`
}

// UserTweetsUser defines model for UserTweetsUser.
type UserTweetsUser struct {
	Result UserTweetsResultV1 `json:"result"`
}

// UserUnavailable defines model for UserUnavailable.
type UserUnavailable struct {
	Typename TypeName `json:"__typename"`
	Message  *string  `json:"message,omitempty"`
	Reason   string   `json:"reason"`
}

// UserUnion defines model for UserUnion.
type UserUnion struct {
	union json.RawMessage
}

// UserValue defines model for UserValue.
type UserValue struct {
	IdStr string `json:"id_str"`
}

// UserVerificationInfo defines model for UserVerificationInfo.
type UserVerificationInfo struct {
	IsIdentityVerified bool                        `json:"is_identity_verified"`
	Reason             *UserVerificationInfoReason `json:"reason,omitempty"`
}

// UserVerificationInfoReason defines model for UserVerificationInfoReason.
type UserVerificationInfoReason struct {
	Description          UserVerificationInfoReasonDescription `json:"description"`
	OverrideVerifiedYear *int                                  `json:"override_verified_year,omitempty"`
	VerifiedSinceMsec    string                                `json:"verified_since_msec"`
}

// UserVerificationInfoReasonDescription defines model for UserVerificationInfoReasonDescription.
type UserVerificationInfoReasonDescription struct {
	Entities []UserVerificationInfoReasonDescriptionEntities `json:"entities"`
	Text     string                                          `json:"text"`
}

// UserVerificationInfoReasonDescriptionEntities defines model for UserVerificationInfoReasonDescriptionEntities.
type UserVerificationInfoReasonDescriptionEntities struct {
	FromIndex int                                              `json:"from_index"`
	Ref       UserVerificationInfoReasonDescriptionEntitiesRef `json:"ref"`
	ToIndex   int                                              `json:"to_index"`
}

// UserVerificationInfoReasonDescriptionEntitiesRef defines model for UserVerificationInfoReasonDescriptionEntitiesRef.
type UserVerificationInfoReasonDescriptionEntitiesRef struct {
	Url     string                                                  `json:"url"`
	UrlType UserVerificationInfoReasonDescriptionEntitiesRefUrlType `json:"url_type"`
}

// UserVerificationInfoReasonDescriptionEntitiesRefUrlType defines model for UserVerificationInfoReasonDescriptionEntitiesRef.UrlType.
type UserVerificationInfoReasonDescriptionEntitiesRefUrlType string

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Data   UsersResponseData `json:"data"`
	Errors *[]ErrorResponse  `json:"errors,omitempty"`
}

// UsersResponseData defines model for UsersResponseData.
type UsersResponseData struct {
	Users *[]UserResults `json:"users,omitempty"`
}

// GetFriendsFollowingListParams defines parameters for GetFriendsFollowingList.
type GetFriendsFollowingListParams struct {
	IncludeProfileInterstitialType int    `form:"include_profile_interstitial_type" json:"include_profile_interstitial_type"`
	IncludeBlocking                int    `form:"include_blocking" json:"include_blocking"`
	IncludeBlockedBy               int    `form:"include_blocked_by" json:"include_blocked_by"`
	IncludeFollowedBy              int    `form:"include_followed_by" json:"include_followed_by"`
	IncludeWantRetweets            int    `form:"include_want_retweets" json:"include_want_retweets"`
	IncludeMuteEdge                int    `form:"include_mute_edge" json:"include_mute_edge"`
	IncludeCanDm                   int    `form:"include_can_dm" json:"include_can_dm"`
	IncludeCanMediaTag             int    `form:"include_can_media_tag" json:"include_can_media_tag"`
	IncludeExtHasNftAvatar         int    `form:"include_ext_has_nft_avatar" json:"include_ext_has_nft_avatar"`
	IncludeExtIsBlueVerified       int    `form:"include_ext_is_blue_verified" json:"include_ext_is_blue_verified"`
	IncludeExtVerifiedType         int    `form:"include_ext_verified_type" json:"include_ext_verified_type"`
	IncludeExtProfileImageShape    int    `form:"include_ext_profile_image_shape" json:"include_ext_profile_image_shape"`
	SkipStatus                     int    `form:"skip_status" json:"skip_status"`
	Cursor                         int    `form:"cursor" json:"cursor"`
	UserId                         string `form:"user_id" json:"user_id"`
	Count                          int    `form:"count" json:"count"`
	WithTotalCount                 bool   `form:"with_total_count" json:"with_total_count"`
}

func (p *GetFriendsFollowingListParams) Query() url.Values {
	query := url.Values{}

	return query
}

// PostCreateFriendshipsFormdataBody defines parameters for PostCreateFriendships.
type PostCreateFriendshipsFormdataBody struct {
	IncludeBlockedBy               int    `form:"include_blocked_by" json:"include_blocked_by"`
	IncludeBlocking                int    `form:"include_blocking" json:"include_blocking"`
	IncludeCanDm                   int    `form:"include_can_dm" json:"include_can_dm"`
	IncludeCanMediaTag             int    `form:"include_can_media_tag" json:"include_can_media_tag"`
	IncludeExtHasNftAvatar         int    `form:"include_ext_has_nft_avatar" json:"include_ext_has_nft_avatar"`
	IncludeExtIsBlueVerified       int    `form:"include_ext_is_blue_verified" json:"include_ext_is_blue_verified"`
	IncludeExtProfileImageShape    int    `form:"include_ext_profile_image_shape" json:"include_ext_profile_image_shape"`
	IncludeExtVerifiedType         int    `form:"include_ext_verified_type" json:"include_ext_verified_type"`
	IncludeFollowedBy              int    `form:"include_followed_by" json:"include_followed_by"`
	IncludeMuteEdge                int    `form:"include_mute_edge" json:"include_mute_edge"`
	IncludeProfileInterstitialType int    `form:"include_profile_interstitial_type" json:"include_profile_interstitial_type"`
	IncludeWantRetweets            int    `form:"include_want_retweets" json:"include_want_retweets"`
	SkipStatus                     int    `form:"skip_status" json:"skip_status"`
	UserId                         string `form:"user_id" json:"user_id"`
}

func (p *PostCreateFriendshipsFormdataBody) Query() url.Values {
	query := url.Values{}

	return query
}

// PostDestroyFriendshipsFormdataBody defines parameters for PostDestroyFriendships.
type PostDestroyFriendshipsFormdataBody struct {
	IncludeBlockedBy               int    `form:"include_blocked_by" json:"include_blocked_by"`
	IncludeBlocking                int    `form:"include_blocking" json:"include_blocking"`
	IncludeCanDm                   int    `form:"include_can_dm" json:"include_can_dm"`
	IncludeCanMediaTag             int    `form:"include_can_media_tag" json:"include_can_media_tag"`
	IncludeExtHasNftAvatar         int    `form:"include_ext_has_nft_avatar" json:"include_ext_has_nft_avatar"`
	IncludeExtIsBlueVerified       int    `form:"include_ext_is_blue_verified" json:"include_ext_is_blue_verified"`
	IncludeExtProfileImageShape    int    `form:"include_ext_profile_image_shape" json:"include_ext_profile_image_shape"`
	IncludeExtVerifiedType         int    `form:"include_ext_verified_type" json:"include_ext_verified_type"`
	IncludeFollowedBy              int    `form:"include_followed_by" json:"include_followed_by"`
	IncludeMuteEdge                int    `form:"include_mute_edge" json:"include_mute_edge"`
	IncludeProfileInterstitialType int    `form:"include_profile_interstitial_type" json:"include_profile_interstitial_type"`
	IncludeWantRetweets            int    `form:"include_want_retweets" json:"include_want_retweets"`
	SkipStatus                     int    `form:"skip_status" json:"skip_status"`
	UserId                         string `form:"user_id" json:"user_id"`
}

func (p *PostDestroyFriendshipsFormdataBody) Query() url.Values {
	query := url.Values{}

	return query
}

// GetSearchTypeaheadParams defines parameters for GetSearchTypeahead.
type GetSearchTypeaheadParams struct {
	IncludeExtIsBlueVerified    int    `form:"include_ext_is_blue_verified" json:"include_ext_is_blue_verified"`
	IncludeExtVerifiedType      int    `form:"include_ext_verified_type" json:"include_ext_verified_type"`
	IncludeExtProfileImageShape int    `form:"include_ext_profile_image_shape" json:"include_ext_profile_image_shape"`
	Q                           string `form:"q" json:"q"`
	Src                         string `form:"src" json:"src"`
	ResultType                  string `form:"result_type" json:"result_type"`
}

func (p *GetSearchTypeaheadParams) Query() url.Values {
	query := url.Values{}

	return query
}

// GetSearchAdaptiveParams defines parameters for GetSearchAdaptive.
type GetSearchAdaptiveParams struct {
	IncludeProfileInterstitialType   int    `form:"include_profile_interstitial_type" json:"include_profile_interstitial_type"`
	IncludeBlocking                  int    `form:"include_blocking" json:"include_blocking"`
	IncludeBlockedBy                 int    `form:"include_blocked_by" json:"include_blocked_by"`
	IncludeFollowedBy                int    `form:"include_followed_by" json:"include_followed_by"`
	IncludeWantRetweets              int    `form:"include_want_retweets" json:"include_want_retweets"`
	IncludeMuteEdge                  int    `form:"include_mute_edge" json:"include_mute_edge"`
	IncludeCanDm                     int    `form:"include_can_dm" json:"include_can_dm"`
	IncludeCanMediaTag               int    `form:"include_can_media_tag" json:"include_can_media_tag"`
	IncludeExtHasNftAvatar           int    `form:"include_ext_has_nft_avatar" json:"include_ext_has_nft_avatar"`
	IncludeExtIsBlueVerified         int    `form:"include_ext_is_blue_verified" json:"include_ext_is_blue_verified"`
	IncludeExtVerifiedType           int    `form:"include_ext_verified_type" json:"include_ext_verified_type"`
	IncludeExtProfileImageShape      int    `form:"include_ext_profile_image_shape" json:"include_ext_profile_image_shape"`
	SkipStatus                       int    `form:"skip_status" json:"skip_status"`
	CardsPlatform                    string `form:"cards_platform" json:"cards_platform"`
	IncludeCards                     int    `form:"include_cards" json:"include_cards"`
	IncludeExtAltText                bool   `form:"include_ext_alt_text" json:"include_ext_alt_text"`
	IncludeExtLimitedActionResults   bool   `form:"include_ext_limited_action_results" json:"include_ext_limited_action_results"`
	IncludeQuoteCount                bool   `form:"include_quote_count" json:"include_quote_count"`
	IncludeReplyCount                int    `form:"include_reply_count" json:"include_reply_count"`
	TweetMode                        string `form:"tweet_mode" json:"tweet_mode"`
	IncludeExtViews                  bool   `form:"include_ext_views" json:"include_ext_views"`
	IncludeEntities                  bool   `form:"include_entities" json:"include_entities"`
	IncludeUserEntities              bool   `form:"include_user_entities" json:"include_user_entities"`
	IncludeExtMediaColor             bool   `form:"include_ext_media_color" json:"include_ext_media_color"`
	IncludeExtMediaAvailability      bool   `form:"include_ext_media_availability" json:"include_ext_media_availability"`
	IncludeExtSensitiveMediaWarning  bool   `form:"include_ext_sensitive_media_warning" json:"include_ext_sensitive_media_warning"`
	IncludeExtTrustedFriendsMetadata bool   `form:"include_ext_trusted_friends_metadata" json:"include_ext_trusted_friends_metadata"`
	SendErrorCodes                   bool   `form:"send_error_codes" json:"send_error_codes"`
	SimpleQuotedTweet                bool   `form:"simple_quoted_tweet" json:"simple_quoted_tweet"`
	Q                                string `form:"q" json:"q"`
	QuerySource                      string `form:"query_source" json:"query_source"`
	Count                            int    `form:"count" json:"count"`
	RequestContext                   string `form:"requestContext" json:"requestContext"`
	Pc                               int    `form:"pc" json:"pc"`
	SpellingCorrections              int    `form:"spelling_corrections" json:"spelling_corrections"`
	IncludeExtEditControl            bool   `form:"include_ext_edit_control" json:"include_ext_edit_control"`
	Ext                              string `form:"ext" json:"ext"`
}

func (p *GetSearchAdaptiveParams) Query() url.Values {
	query := url.Values{}

	return query
}

// GetBookmarksParams defines parameters for GetBookmarks.
type GetBookmarksParams struct {
	Variables struct {
		Count                  int  `json:"count"`
		IncludePromotedContent bool `json:"includePromotedContent"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetBookmarksParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetCommunityAboutTimelineParams defines parameters for GetCommunityAboutTimeline.
type GetCommunityAboutTimelineParams struct {
	Variables struct {
		CommunityId   string `json:"communityId"`
		WithCommunity bool   `json:"withCommunity"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetCommunityAboutTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetCommunityMediaTimelineParams defines parameters for GetCommunityMediaTimeline.
type GetCommunityMediaTimelineParams struct {
	Variables struct {
		CommunityId   string `json:"communityId"`
		Count         int    `json:"count"`
		WithCommunity bool   `json:"withCommunity"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetCommunityMediaTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetCommunityTweetsTimelineParams defines parameters for GetCommunityTweetsTimeline.
type GetCommunityTweetsTimelineParams struct {
	Variables struct {
		CommunityId     string `json:"communityId"`
		Count           int    `json:"count"`
		DisplayLocation string `json:"displayLocation"`
		RankingMode     string `json:"rankingMode"`
		WithCommunity   bool   `json:"withCommunity"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetCommunityTweetsTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// PostCreateBookmarkJSONBody defines parameters for PostCreateBookmark.
type PostCreateBookmarkJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		TweetId string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostCreateBookmarkJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostCreateRetweetJSONBody defines parameters for PostCreateRetweet.
type PostCreateRetweetJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		DarkRequest bool   `json:"dark_request"`
		TweetId     string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostCreateRetweetJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostCreateTweetJSONBody defines parameters for PostCreateTweet.
type PostCreateTweetJSONBody struct {
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `json:"features"`
	QueryId   string `json:"queryId"`
	Variables struct {
		AttachmentUrl       *string `json:"attachment_url,omitempty"`
		ConversationControl *struct {
			Mode string `json:"mode"`
		} `json:"conversation_control,omitempty"`
		DarkRequest            bool                    `json:"dark_request"`
		DisallowedReplyOptions *map[string]interface{} `json:"disallowed_reply_options,omitempty"`
		Media                  struct {
			MediaEntities *[]struct {
				MediaId     string   `json:"media_id"`
				TaggedUsers []string `json:"tagged_users"`
			} `json:"media_entities,omitempty"`
			PossiblySensitive bool `json:"possibly_sensitive"`
		} `json:"media"`
		Reply *struct {
			ExcludeReplyUserIds []map[string]interface{} `json:"exclude_reply_user_ids"`
			InReplyToTweetId    string                   `json:"in_reply_to_tweet_id"`
		} `json:"reply,omitempty"`
		SemanticAnnotationIds []map[string]interface{} `json:"semantic_annotation_ids"`
		TweetText             string                   `json:"tweet_text"`
	} `json:"variables"`
}

func (p *PostCreateTweetJSONBody) Query() url.Values {
	query := url.Values{}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostDeleteBookmarkJSONBody defines parameters for PostDeleteBookmark.
type PostDeleteBookmarkJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		TweetId string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostDeleteBookmarkJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostDeleteRetweetJSONBody defines parameters for PostDeleteRetweet.
type PostDeleteRetweetJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		DarkRequest   bool   `json:"dark_request"`
		SourceTweetId string `json:"source_tweet_id"`
	} `json:"variables"`
}

func (p *PostDeleteRetweetJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostDeleteTweetJSONBody defines parameters for PostDeleteTweet.
type PostDeleteTweetJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		DarkRequest bool   `json:"dark_request"`
		TweetId     string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostDeleteTweetJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// PostFavoriteTweetJSONBody defines parameters for PostFavoriteTweet.
type PostFavoriteTweetJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		TweetId string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostFavoriteTweetJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// GetFavoritersParams defines parameters for GetFavoriters.
type GetFavoritersParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		TweetId                string `json:"tweetId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetFavoritersParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetFollowersParams defines parameters for GetFollowers.
type GetFollowersParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetFollowersParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetFollowersYouKnowParams defines parameters for GetFollowersYouKnow.
type GetFollowersYouKnowParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetFollowersYouKnowParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetFollowingParams defines parameters for GetFollowing.
type GetFollowingParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetFollowingParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetHomeLatestTimelineParams defines parameters for GetHomeLatestTimeline.
type GetHomeLatestTimelineParams struct {
	Variables struct {
		Count                  int      `json:"count"`
		IncludePromotedContent bool     `json:"includePromotedContent"`
		LatestControlAvailable bool     `json:"latestControlAvailable"`
		RequestContext         string   `json:"requestContext"`
		SeenTweetIds           []string `json:"seenTweetIds"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetHomeLatestTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetHomeTimelineParams defines parameters for GetHomeTimeline.
type GetHomeTimelineParams struct {
	Variables struct {
		Count                  int      `json:"count"`
		IncludePromotedContent bool     `json:"includePromotedContent"`
		LatestControlAvailable bool     `json:"latestControlAvailable"`
		RequestContext         string   `json:"requestContext"`
		SeenTweetIds           []string `json:"seenTweetIds"`
		WithCommunity          bool     `json:"withCommunity"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetHomeTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetLikesParams defines parameters for GetLikes.
type GetLikesParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
		WithBirdwatchNotes     bool   `json:"withBirdwatchNotes"`
		WithClientEventToken   bool   `json:"withClientEventToken"`
		WithVoice              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText bool `json:"withArticlePlainText"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetLikesParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetListLatestTweetsTimelineParams defines parameters for GetListLatestTweetsTimeline.
type GetListLatestTweetsTimelineParams struct {
	Variables struct {
		Count  int    `json:"count"`
		ListId string `json:"listId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetListLatestTweetsTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetNotificationsTimelineParams defines parameters for GetNotificationsTimeline.
type GetNotificationsTimelineParams struct {
	Variables struct {
		Count        int    `json:"count"`
		TimelineType string `json:"timeline_type"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetNotificationsTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetProfileSpotlightsQueryParams defines parameters for GetProfileSpotlightsQuery.
type GetProfileSpotlightsQueryParams struct {
	Variables struct {
		ScreenName string `json:"screen_name"`
	} `form:"variables" json:"variables"`
	Features map[string]interface{} `form:"features" json:"features"`
}

func (p *GetProfileSpotlightsQueryParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetRetweetersParams defines parameters for GetRetweeters.
type GetRetweetersParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		TweetId                string `json:"tweetId"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetRetweetersParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetSearchTimelineParams defines parameters for GetSearchTimeline.
type GetSearchTimelineParams struct {
	Variables struct {
		Count       int    `json:"count"`
		Product     string `json:"product"`
		QuerySource string `json:"querySource"`
		RawQuery    string `json:"rawQuery"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetSearchTimelineParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetTweetDetailParams defines parameters for GetTweetDetail.
type GetTweetDetailParams struct {
	Variables struct {
		FocalTweetId                           string `json:"focalTweetId"`
		IncludePromotedContent                 bool   `json:"includePromotedContent"`
		RankingMode                            string `json:"rankingMode"`
		Referrer                               string `json:"referrer"`
		WithBirdwatchNotes                     bool   `json:"withBirdwatchNotes"`
		WithCommunity                          bool   `json:"withCommunity"`
		WithQuickPromoteEligibilityTweetFields bool   `json:"withQuickPromoteEligibilityTweetFields"`
		WithVoice                              bool   `json:"withVoice"`
		WithRuxInjections                      bool   `json:"with_rux_injections"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText        bool `json:"withArticlePlainText"`
		WithArticleRichContentState bool `json:"withArticleRichContentState"`
		WithDisallowedReplyControls bool `json:"withDisallowedReplyControls"`
		WithGrokAnalyze             bool `json:"withGrokAnalyze"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetTweetDetailParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetTweetResultByRestIdParams defines parameters for GetTweetResultByRestId.
type GetTweetResultByRestIdParams struct {
	Variables struct {
		IncludePromotedContent bool   `json:"includePromotedContent"`
		TweetId                string `json:"tweetId"`
		WithCommunity          bool   `json:"withCommunity"`
		WithVoice              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlExcludeDirectiveEnabled                    bool `json:"responsive_web_graphql_exclude_directive_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoTimestampsEnabled                                     bool `json:"rweb_video_timestamps_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		TweetWithVisibilityResultsPreferGqlMediaInterstitialEnabled    bool `json:"tweet_with_visibility_results_prefer_gql_media_interstitial_enabled"`
		TweetypieUnmentionOptimizationEnabled                          bool `json:"tweetypie_unmention_optimization_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText        bool `json:"withArticlePlainText"`
		WithArticleRichContentState bool `json:"withArticleRichContentState"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetTweetResultByRestIdParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// PostUnfavoriteTweetJSONBody defines parameters for PostUnfavoriteTweet.
type PostUnfavoriteTweetJSONBody struct {
	QueryId   string `json:"queryId"`
	Variables struct {
		DarkRequest bool   `json:"dark_request"`
		TweetId     string `json:"tweet_id"`
	} `json:"variables"`
}

func (p *PostUnfavoriteTweetJSONBody) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	return query
}

// GetUserByRestIdParams defines parameters for GetUserByRestId.
type GetUserByRestIdParams struct {
	Variables struct {
		UserId                   string `json:"userId"`
		WithSafetyModeUserFields bool   `json:"withSafetyModeUserFields"`
	} `form:"variables" json:"variables"`
	Features struct {
		CreatorSubscriptionsTweetPreviewApiEnabled                bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		HiddenProfileLikesEnabled                                 bool `json:"hidden_profile_likes_enabled"`
		HiddenProfileSubscriptionsEnabled                         bool `json:"hidden_profile_subscriptions_enabled"`
		HighlightsTweetsTabUiEnabled                              bool `json:"highlights_tweets_tab_ui_enabled"`
		ResponsiveWebGraphqlExcludeDirectiveEnabled               bool `json:"responsive_web_graphql_exclude_directive_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled             bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebTwitterArticleNotesTabEnabled                bool `json:"responsive_web_twitter_article_notes_tab_enabled"`
		VerifiedPhoneLabelEnabled                                 bool `json:"verified_phone_label_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetUserByRestIdParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// GetUserByScreenNameParams defines parameters for GetUserByScreenName.
type GetUserByScreenNameParams struct {
	Variables struct {
		ScreenName string `json:"screen_name"`
	} `form:"variables" json:"variables"`
	Features struct {
		CreatorSubscriptionsTweetPreviewApiEnabled                bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		HiddenProfileSubscriptionsEnabled                         bool `json:"hidden_profile_subscriptions_enabled"`
		HighlightsTweetsTabUiEnabled                              bool `json:"highlights_tweets_tab_ui_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled             bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled             bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebTwitterArticleNotesTabEnabled                bool `json:"responsive_web_twitter_article_notes_tab_enabled"`
		RwebTipjarConsumptionEnabled                              bool `json:"rweb_tipjar_consumption_enabled"`
		SubscriptionsFeatureCanGiftPremium                        bool `json:"subscriptions_feature_can_gift_premium"`
		SubscriptionsVerificationInfoIsIdentityVerifiedEnabled    bool `json:"subscriptions_verification_info_is_identity_verified_enabled"`
		SubscriptionsVerificationInfoVerifiedSinceEnabled         bool `json:"subscriptions_verification_info_verified_since_enabled"`
		VerifiedPhoneLabelEnabled                                 bool `json:"verified_phone_label_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithAuxiliaryUserLabels bool `json:"withAuxiliaryUserLabels"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetUserByScreenNameParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetUserHighlightsTweetsParams defines parameters for GetUserHighlightsTweets.
type GetUserHighlightsTweetsParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
		WithVoice              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText bool `json:"withArticlePlainText"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetUserHighlightsTweetsParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetUserMediaParams defines parameters for GetUserMedia.
type GetUserMediaParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
		WithBirdwatchNotes     bool   `json:"withBirdwatchNotes"`
		WithClientEventToken   bool   `json:"withClientEventToken"`
		WithVoice              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText bool `json:"withArticlePlainText"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetUserMediaParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetUserTweetsParams defines parameters for GetUserTweets.
type GetUserTweetsParams struct {
	Variables struct {
		Count                                  int    `json:"count"`
		IncludePromotedContent                 bool   `json:"includePromotedContent"`
		UserId                                 string `json:"userId"`
		WithQuickPromoteEligibilityTweetFields bool   `json:"withQuickPromoteEligibilityTweetFields"`
		WithVoice                              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText bool `json:"withArticlePlainText"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetUserTweetsParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetUserTweetsAndRepliesParams defines parameters for GetUserTweetsAndReplies.
type GetUserTweetsAndRepliesParams struct {
	Variables struct {
		Count                  int    `json:"count"`
		IncludePromotedContent bool   `json:"includePromotedContent"`
		UserId                 string `json:"userId"`
		WithCommunity          bool   `json:"withCommunity"`
		WithVoice              bool   `json:"withVoice"`
	} `form:"variables" json:"variables"`
	Features struct {
		ArticlesPreviewEnabled                                         bool `json:"articles_preview_enabled"`
		C9sTweetAnatomyModeratorBadgeEnabled                           bool `json:"c9s_tweet_anatomy_moderator_badge_enabled"`
		CommunitiesWebEnableTweetCommunityResultsFetch                 bool `json:"communities_web_enable_tweet_community_results_fetch"`
		CreatorSubscriptionsQuoteTweetPreviewEnabled                   bool `json:"creator_subscriptions_quote_tweet_preview_enabled"`
		CreatorSubscriptionsTweetPreviewApiEnabled                     bool `json:"creator_subscriptions_tweet_preview_api_enabled"`
		FreedomOfSpeechNotReachFetchEnabled                            bool `json:"freedom_of_speech_not_reach_fetch_enabled"`
		GraphqlIsTranslatableRwebTweetIsTranslatableEnabled            bool `json:"graphql_is_translatable_rweb_tweet_is_translatable_enabled"`
		LongformNotetweetsConsumptionEnabled                           bool `json:"longform_notetweets_consumption_enabled"`
		LongformNotetweetsInlineMediaEnabled                           bool `json:"longform_notetweets_inline_media_enabled"`
		LongformNotetweetsRichTextReadEnabled                          bool `json:"longform_notetweets_rich_text_read_enabled"`
		PremiumContentApiReadEnabled                                   bool `json:"premium_content_api_read_enabled"`
		ProfileLabelImprovementsPcfLabelInPostEnabled                  bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebEditTweetApiEnabled                               bool `json:"responsive_web_edit_tweet_api_enabled"`
		ResponsiveWebEnhanceCardsEnabled                               bool `json:"responsive_web_enhance_cards_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled      bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled                  bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		ResponsiveWebGrokAnalysisButtonFromBackend                     bool `json:"responsive_web_grok_analysis_button_from_backend"`
		ResponsiveWebGrokAnalyzeButtonFetchTrendsEnabled               bool `json:"responsive_web_grok_analyze_button_fetch_trends_enabled"`
		ResponsiveWebGrokAnalyzePostFollowupsEnabled                   bool `json:"responsive_web_grok_analyze_post_followups_enabled"`
		ResponsiveWebGrokImageAnnotationEnabled                        bool `json:"responsive_web_grok_image_annotation_enabled"`
		ResponsiveWebGrokShareAttachmentEnabled                        bool `json:"responsive_web_grok_share_attachment_enabled"`
		ResponsiveWebGrokShowGrokTranslatedPost                        bool `json:"responsive_web_grok_show_grok_translated_post"`
		ResponsiveWebJetfuelFrame                                      bool `json:"responsive_web_jetfuel_frame"`
		ResponsiveWebTwitterArticleTweetConsumptionEnabled             bool `json:"responsive_web_twitter_article_tweet_consumption_enabled"`
		RwebTipjarConsumptionEnabled                                   bool `json:"rweb_tipjar_consumption_enabled"`
		RwebVideoScreenEnabled                                         bool `json:"rweb_video_screen_enabled"`
		StandardizedNudgesMisinfo                                      bool `json:"standardized_nudges_misinfo"`
		TweetAwardsWebTippingEnabled                                   bool `json:"tweet_awards_web_tipping_enabled"`
		TweetWithVisibilityResultsPreferGqlLimitedActionsPolicyEnabled bool `json:"tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled"`
		VerifiedPhoneLabelEnabled                                      bool `json:"verified_phone_label_enabled"`
		ViewCountsEverywhereApiEnabled                                 bool `json:"view_counts_everywhere_api_enabled"`
	} `form:"features" json:"features"`
	FieldToggles struct {
		WithArticlePlainText bool `json:"withArticlePlainText"`
	} `form:"fieldToggles" json:"fieldToggles"`
}

func (p *GetUserTweetsAndRepliesParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	fieldTogglesJson, err := json.Marshal(p.FieldToggles)
	if err == nil {
		query.Set("fieldToggles", string(fieldTogglesJson))
	}

	return query
}

// GetUsersByRestIdsParams defines parameters for GetUsersByRestIds.
type GetUsersByRestIdsParams struct {
	Variables struct {
		UserIds []string `json:"userIds"`
	} `form:"variables" json:"variables"`
	Features struct {
		ProfileLabelImprovementsPcfLabelInPostEnabled             bool `json:"profile_label_improvements_pcf_label_in_post_enabled"`
		ResponsiveWebGraphqlSkipUserProfileImageExtensionsEnabled bool `json:"responsive_web_graphql_skip_user_profile_image_extensions_enabled"`
		ResponsiveWebGraphqlTimelineNavigationEnabled             bool `json:"responsive_web_graphql_timeline_navigation_enabled"`
		RwebTipjarConsumptionEnabled                              bool `json:"rweb_tipjar_consumption_enabled"`
		VerifiedPhoneLabelEnabled                                 bool `json:"verified_phone_label_enabled"`
	} `form:"features" json:"features"`
}

func (p *GetUsersByRestIdsParams) Query() url.Values {
	query := url.Values{}

	variablesJson, err := json.Marshal(p.Variables)
	if err == nil {
		query.Set("variables", string(variablesJson))
	}

	featuresJson, err := json.Marshal(p.Features)
	if err == nil {
		query.Set("features", string(featuresJson))
	}

	return query
}

// PostCreateFriendshipsFormdataRequestBody defines body for PostCreateFriendships for application/x-www-form-urlencoded ContentType.
type PostCreateFriendshipsFormdataRequestBody PostCreateFriendshipsFormdataBody

// PostDestroyFriendshipsFormdataRequestBody defines body for PostDestroyFriendships for application/x-www-form-urlencoded ContentType.
type PostDestroyFriendshipsFormdataRequestBody PostDestroyFriendshipsFormdataBody

// PostCreateBookmarkJSONRequestBody defines body for PostCreateBookmark for application/json ContentType.
type PostCreateBookmarkJSONRequestBody PostCreateBookmarkJSONBody

// PostCreateRetweetJSONRequestBody defines body for PostCreateRetweet for application/json ContentType.
type PostCreateRetweetJSONRequestBody PostCreateRetweetJSONBody

// PostCreateTweetJSONRequestBody defines body for PostCreateTweet for application/json ContentType.
type PostCreateTweetJSONRequestBody PostCreateTweetJSONBody

// PostDeleteBookmarkJSONRequestBody defines body for PostDeleteBookmark for application/json ContentType.
type PostDeleteBookmarkJSONRequestBody PostDeleteBookmarkJSONBody

// PostDeleteRetweetJSONRequestBody defines body for PostDeleteRetweet for application/json ContentType.
type PostDeleteRetweetJSONRequestBody PostDeleteRetweetJSONBody

// PostDeleteTweetJSONRequestBody defines body for PostDeleteTweet for application/json ContentType.
type PostDeleteTweetJSONRequestBody PostDeleteTweetJSONBody

// PostFavoriteTweetJSONRequestBody defines body for PostFavoriteTweet for application/json ContentType.
type PostFavoriteTweetJSONRequestBody PostFavoriteTweetJSONBody

// PostUnfavoriteTweetJSONRequestBody defines body for PostUnfavoriteTweet for application/json ContentType.
type PostUnfavoriteTweetJSONRequestBody PostUnfavoriteTweetJSONBody

// Getter for additional properties for TimelineCommunity. Returns the specified
// element and whether it was found
func (a TimelineCommunity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimelineCommunity
func (a *TimelineCommunity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimelineCommunity to handle AdditionalProperties
func (a *TimelineCommunity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["__typename"]; found {
		err = json.Unmarshal(raw, &a.Typename)
		if err != nil {
			return fmt.Errorf("error reading '__typename': %w", err)
		}
		delete(object, "__typename")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimelineCommunity to handle AdditionalProperties
func (a TimelineCommunity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Typename != nil {
		object["__typename"], err = json.Marshal(a.Typename)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '__typename': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimelineMessagePrompt. Returns the specified
// element and whether it was found
func (a TimelineMessagePrompt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimelineMessagePrompt
func (a *TimelineMessagePrompt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimelineMessagePrompt to handle AdditionalProperties
func (a *TimelineMessagePrompt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["__typename"]; found {
		err = json.Unmarshal(raw, &a.Typename)
		if err != nil {
			return fmt.Errorf("error reading '__typename': %w", err)
		}
		delete(object, "__typename")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimelineMessagePrompt to handle AdditionalProperties
func (a TimelineMessagePrompt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Typename != nil {
		object["__typename"], err = json.Marshal(a.Typename)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '__typename': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimelinePrompt. Returns the specified
// element and whether it was found
func (a TimelinePrompt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimelinePrompt
func (a *TimelinePrompt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimelinePrompt to handle AdditionalProperties
func (a *TimelinePrompt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["__typename"]; found {
		err = json.Unmarshal(raw, &a.Typename)
		if err != nil {
			return fmt.Errorf("error reading '__typename': %w", err)
		}
		delete(object, "__typename")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimelinePrompt to handle AdditionalProperties
func (a TimelinePrompt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Typename != nil {
		object["__typename"], err = json.Marshal(a.Typename)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '__typename': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TweetTombstone. Returns the specified
// element and whether it was found
func (a TweetTombstone) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TweetTombstone
func (a *TweetTombstone) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TweetTombstone to handle AdditionalProperties
func (a *TweetTombstone) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["__typename"]; found {
		err = json.Unmarshal(raw, &a.Typename)
		if err != nil {
			return fmt.Errorf("error reading '__typename': %w", err)
		}
		delete(object, "__typename")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TweetTombstone to handle AdditionalProperties
func (a TweetTombstone) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Typename != nil {
		object["__typename"], err = json.Marshal(a.Typename)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '__typename': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsCommunityJoinAction returns the union data inside the CommunityJoinActionResultUnion as a CommunityJoinAction
func (t CommunityJoinActionResultUnion) AsCommunityJoinAction() (CommunityJoinAction, error) {
	var body CommunityJoinAction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsCommunityJoinActionUnavailable returns the union data inside the CommunityJoinActionResultUnion as a CommunityJoinActionUnavailable
func (t CommunityJoinActionResultUnion) AsCommunityJoinActionUnavailable() (CommunityJoinActionUnavailable, error) {
	var body CommunityJoinActionUnavailable
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t CommunityJoinActionResultUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"__typename"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CommunityJoinActionResultUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CommunityJoinAction":
		return t.AsCommunityJoinAction()
	case "CommunityJoinActionUnavailable":
		return t.AsCommunityJoinActionUnavailable()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CommunityJoinActionResultUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CommunityJoinActionResultUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTimelineTimelineItem returns the union data inside the ContentUnion as a TimelineTimelineItem
func (t ContentUnion) AsTimelineTimelineItem() (TimelineTimelineItem, error) {
	var body TimelineTimelineItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTimelineModule returns the union data inside the ContentUnion as a TimelineTimelineModule
func (t ContentUnion) AsTimelineTimelineModule() (TimelineTimelineModule, error) {
	var body TimelineTimelineModule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTimelineCursor returns the union data inside the ContentUnion as a TimelineTimelineCursor
func (t ContentUnion) AsTimelineTimelineCursor() (TimelineTimelineCursor, error) {
	var body TimelineTimelineCursor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t ContentUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"entryType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ContentUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TimelineTimelineCursor":
		return t.AsTimelineTimelineCursor()
	case "TimelineTimelineItem":
		return t.AsTimelineTimelineItem()
	case "TimelineTimelineModule":
		return t.AsTimelineTimelineModule()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ContentUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ContentUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorResponsePath0 returns the union data inside the ErrorResponse_Path_Item as a ErrorResponsePath0
func (t ErrorResponse_Path_Item) AsErrorResponsePath0() (ErrorResponsePath0, error) {
	var body ErrorResponsePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsErrorResponsePath1 returns the union data inside the ErrorResponse_Path_Item as a ErrorResponsePath1
func (t ErrorResponse_Path_Item) AsErrorResponsePath1() (ErrorResponsePath1, error) {
	var body ErrorResponsePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t ErrorResponse_Path_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ErrorResponse_Path_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTimelineAddEntries returns the union data inside the InstructionUnion as a TimelineAddEntries
func (t InstructionUnion) AsTimelineAddEntries() (TimelineAddEntries, error) {
	var body TimelineAddEntries
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineAddToModule returns the union data inside the InstructionUnion as a TimelineAddToModule
func (t InstructionUnion) AsTimelineAddToModule() (TimelineAddToModule, error) {
	var body TimelineAddToModule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineClearCache returns the union data inside the InstructionUnion as a TimelineClearCache
func (t InstructionUnion) AsTimelineClearCache() (TimelineClearCache, error) {
	var body TimelineClearCache
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelinePinEntry returns the union data inside the InstructionUnion as a TimelinePinEntry
func (t InstructionUnion) AsTimelinePinEntry() (TimelinePinEntry, error) {
	var body TimelinePinEntry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineReplaceEntry returns the union data inside the InstructionUnion as a TimelineReplaceEntry
func (t InstructionUnion) AsTimelineReplaceEntry() (TimelineReplaceEntry, error) {
	var body TimelineReplaceEntry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineShowAlert returns the union data inside the InstructionUnion as a TimelineShowAlert
func (t InstructionUnion) AsTimelineShowAlert() (TimelineShowAlert, error) {
	var body TimelineShowAlert
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTerminateTimeline returns the union data inside the InstructionUnion as a TimelineTerminateTimeline
func (t InstructionUnion) AsTimelineTerminateTimeline() (TimelineTerminateTimeline, error) {
	var body TimelineTerminateTimeline
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineShowCover returns the union data inside the InstructionUnion as a TimelineShowCover
func (t InstructionUnion) AsTimelineShowCover() (TimelineShowCover, error) {
	var body TimelineShowCover
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineClearEntriesUnreadState returns the union data inside the InstructionUnion as a TimelineClearEntriesUnreadState
func (t InstructionUnion) AsTimelineClearEntriesUnreadState() (TimelineClearEntriesUnreadState, error) {
	var body TimelineClearEntriesUnreadState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineMarkEntriesUnreadGreaterThanSortIndex returns the union data inside the InstructionUnion as a TimelineMarkEntriesUnreadGreaterThanSortIndex
func (t InstructionUnion) AsTimelineMarkEntriesUnreadGreaterThanSortIndex() (TimelineMarkEntriesUnreadGreaterThanSortIndex, error) {
	var body TimelineMarkEntriesUnreadGreaterThanSortIndex
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t InstructionUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t InstructionUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TimelineAddEntries":
		return t.AsTimelineAddEntries()
	case "TimelineAddToModule":
		return t.AsTimelineAddToModule()
	case "TimelineClearCache":
		return t.AsTimelineClearCache()
	case "TimelineClearEntriesUnreadState":
		return t.AsTimelineClearEntriesUnreadState()
	case "TimelineMarkEntriesUnreadGreaterThanSortIndex":
		return t.AsTimelineMarkEntriesUnreadGreaterThanSortIndex()
	case "TimelinePinEntry":
		return t.AsTimelinePinEntry()
	case "TimelineReplaceEntry":
		return t.AsTimelineReplaceEntry()
	case "TimelineShowAlert":
		return t.AsTimelineShowAlert()
	case "TimelineShowCover":
		return t.AsTimelineShowCover()
	case "TimelineTerminateTimeline":
		return t.AsTimelineTerminateTimeline()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t InstructionUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstructionUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTimelineTweet returns the union data inside the ItemContentUnion as a TimelineTweet
func (t ItemContentUnion) AsTimelineTweet() (TimelineTweet, error) {
	var body TimelineTweet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTimelineCursor returns the union data inside the ItemContentUnion as a TimelineTimelineCursor
func (t ItemContentUnion) AsTimelineTimelineCursor() (TimelineTimelineCursor, error) {
	var body TimelineTimelineCursor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineUser returns the union data inside the ItemContentUnion as a TimelineUser
func (t ItemContentUnion) AsTimelineUser() (TimelineUser, error) {
	var body TimelineUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelinePrompt returns the union data inside the ItemContentUnion as a TimelinePrompt
func (t ItemContentUnion) AsTimelinePrompt() (TimelinePrompt, error) {
	var body TimelinePrompt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineMessagePrompt returns the union data inside the ItemContentUnion as a TimelineMessagePrompt
func (t ItemContentUnion) AsTimelineMessagePrompt() (TimelineMessagePrompt, error) {
	var body TimelineMessagePrompt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineCommunity returns the union data inside the ItemContentUnion as a TimelineCommunity
func (t ItemContentUnion) AsTimelineCommunity() (TimelineCommunity, error) {
	var body TimelineCommunity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTombstone returns the union data inside the ItemContentUnion as a TimelineTombstone
func (t ItemContentUnion) AsTimelineTombstone() (TimelineTombstone, error) {
	var body TimelineTombstone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTrend returns the union data inside the ItemContentUnion as a TimelineTrend
func (t ItemContentUnion) AsTimelineTrend() (TimelineTrend, error) {
	var body TimelineTrend
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineNotification returns the union data inside the ItemContentUnion as a TimelineNotification
func (t ItemContentUnion) AsTimelineNotification() (TimelineNotification, error) {
	var body TimelineNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t ItemContentUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"__typename"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ItemContentUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TimelineCommunity":
		return t.AsTimelineCommunity()
	case "TimelineMessagePrompt":
		return t.AsTimelineMessagePrompt()
	case "TimelineNotification":
		return t.AsTimelineNotification()
	case "TimelinePrompt":
		return t.AsTimelinePrompt()
	case "TimelineTimelineCursor":
		return t.AsTimelineTimelineCursor()
	case "TimelineTombstone":
		return t.AsTimelineTombstone()
	case "TimelineTrend":
		return t.AsTimelineTrend()
	case "TimelineTweet":
		return t.AsTimelineTweet()
	case "TimelineUser":
		return t.AsTimelineUser()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ItemContentUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ItemContentUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTimelineGeneralContext returns the union data inside the SocialContextUnion as a TimelineGeneralContext
func (t SocialContextUnion) AsTimelineGeneralContext() (TimelineGeneralContext, error) {
	var body TimelineGeneralContext
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTimelineTopicContext returns the union data inside the SocialContextUnion as a TimelineTopicContext
func (t SocialContextUnion) AsTimelineTopicContext() (TimelineTopicContext, error) {
	var body TimelineTopicContext
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t SocialContextUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SocialContextUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TimelineGeneralContext":
		return t.AsTimelineGeneralContext()
	case "TimelineTopicContext":
		return t.AsTimelineTopicContext()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SocialContextUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SocialContextUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTweet returns the union data inside the TweetUnion as a Tweet
func (t TweetUnion) AsTweet() (Tweet, error) {
	var body Tweet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTweetWithVisibilityResults returns the union data inside the TweetUnion as a TweetWithVisibilityResults
func (t TweetUnion) AsTweetWithVisibilityResults() (TweetWithVisibilityResults, error) {
	var body TweetWithVisibilityResults
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTweetTombstone returns the union data inside the TweetUnion as a TweetTombstone
func (t TweetUnion) AsTweetTombstone() (TweetTombstone, error) {
	var body TweetTombstone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTweetUnavailable returns the union data inside the TweetUnion as a TweetUnavailable
func (t TweetUnion) AsTweetUnavailable() (TweetUnavailable, error) {
	var body TweetUnavailable
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsTweetPreviewDisplay returns the union data inside the TweetUnion as a TweetPreviewDisplay
func (t TweetUnion) AsTweetPreviewDisplay() (TweetPreviewDisplay, error) {
	var body TweetPreviewDisplay
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t TweetUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"__typename"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TweetUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Tweet":
		return t.AsTweet()
	case "TweetPreviewDisplay":
		return t.AsTweetPreviewDisplay()
	case "TweetTombstone":
		return t.AsTweetTombstone()
	case "TweetUnavailable":
		return t.AsTweetUnavailable()
	case "TweetWithVisibilityResults":
		return t.AsTweetWithVisibilityResults()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TweetUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TweetUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUser returns the union data inside the UserUnion as a User
func (t UserUnion) AsUser() (User, error) {
	var body User
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsUserUnavailable returns the union data inside the UserUnion as a UserUnavailable
func (t UserUnion) AsUserUnavailable() (UserUnavailable, error) {
	var body UserUnavailable
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t UserUnion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"__typename"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UserUnion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "User":
		return t.AsUser()
	case "UserUnavailable":
		return t.AsUserUnavailable()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UserUnion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UserUnion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
